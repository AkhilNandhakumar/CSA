{
  
    
        "post0": {
            "title": "Iteration Notes",
            "content": "4.1 While Loops (2.B, 3.C) . Repeats lines of code until a certain condition evaluates to false | . While loops consist of 2 portions: the boolean expression and the brackets which store the looping code inside. . while (condition) { ... } . The boolean expression is checked before the loop is started and every time the loop ends and is about to start anew. Usually, inside the loop something is done that slightly changes the conditions for the boolean expression until it reads false and ends. In the example below, the condition is x &gt; 0, meaning that x has to be changed for the loop to stop. Inside the loop, x is decremented by 1 every time, changing the conditions over and over again until it finally returns false and terminates the while loop. . int x = 5; // The boolean expression in this case is x &gt; 0 while (x &gt; 0) { System.out.println(x); x--; } . 5 4 3 2 1 . 4.2 For Loops . One of the most tested concepts in the APCSA exam | Skills 3.C, 4.C, and 5.C | . Three Parts of a For Loop . Initialization of a variable | Test condition | . for (initialize; test condition; change) { loop body } . Example . for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . 1 2 3 4 5 . 4.3 Loops and Strings . Strings can also be manipulated through the use of iteration. Strings can actually be thought of as an array of chars, so each char can also be manipulated as well! . String name = &quot;CodeCodeCode&quot;; for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . Co de Co de Co de . 4.4 Nested Iteration . Nested iteration is where there is a loop within a loop. It&#39;s kind of similar to the nested conditional that we learned yesterday in syntax. . A typical usage of nested looping is for two dimensions, like getting the pixel value of each pixel in an image across the columns and rows of pixels. Or, it can be used to print across these rows and columns to display some text . A very common nested iteration is the use of nested for loops, as they are concise enough to be used within each other without getting confused. Here is an example of code that uses nested for loops: . for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . **** **** **** **** **** . As seen, the code above has an output of 20 stars, with 5 rows and 4 columns. The amount of times the nested iterations loop in total will be the amount the outer one iterates multiplied by the inner one. The inner loop must finish all of its iterations before the outer loop can continue. . Question: . What happens if you swap the inner with the outer loop? What change will the output make? | . There can also be nested while loops, although they are not as practical, having to write out those variables outside of the condition. . For Each Loops . What is a for each loop? . As the name suggests, for-each loops are similar to for loops. In Java, the for-each loop is used to iterate through elements of arrays and collections (like ArrayList). It is also known as the enhanced for loop. . Here is the syntax for a for-each loop: . for(dataType item : array) { ... } . includes: . array: an array or collection | item: each value in an array or collection | dataType: specify the type of data in the array (int) | . Example . public class ForEachLoops { public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } } } . Output: . 2 10 5 12 .",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/11/09/unit4notes.html",
            "relUrl": "/2022/11/09/unit4notes.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://akhilnandhakumar.github.io/CSA/jupyter/2022/11/08/test.html",
            "relUrl": "/jupyter/2022/11/08/test.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Final Blog",
            "content": "Test Corrections . Question 4: . I answered 2.33333333 instead of 2, because I didn&#39;t check to see what type of variable the num was. Because the variable type was Int, the result would be truncated to 2, not a double. | . | Question 15 . I thought solution II worked, and it technically did, but I did not iterate the whole way through and assumed that the for loop had the correct length, but it throws and outOfBounds error because it iterates too many times. | . | Question 23 . My answer would have worked if the condition for the loop was k &gt; 1, not k &gt; 0. I need to just read more carefully so that when I would out the iteration steps, I get the correct outputs. | . | Question 36 . I missclicked, this question was really easy, I thought I chose the correct answer but I guess I didn&#39;t, | . | . Reflection . Overall, I did really well. a 36/40 on the MCQ section and a good performance on the FRQ section would be a 5 on the ap exam. The part I really need to work on is maybe slowing down a bit and making sure I read the code given more closely to avoid making silly mistakes. All of the mistakes I made were not conceptual which is good, but to get a perfect score I need ot pay more attention on the instruction on the questions. . Unit 1 Homework - Code Below . Unit 1 NotesLINK . Repo Link: LINK . import java.util.Scanner; public class GradeCalculator { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;Is final in a separate category: (true/false)&quot;); boolean check = input.nextBoolean(); if(check){ System.out.println(&quot;Current Grade:&quot;); double currentGrade = input.nextDouble(); System.out.println(&quot;Desired Grade:&quot;); double desiredGrade = input.nextDouble(); System.out.println(&quot;How much percent of your grade is the final:&quot;); double finalPercent = input.nextDouble(); double finalGrade = ((desiredGrade-((1-finalPercent/100)*currentGrade))/(finalPercent/100)); System.out.println(&quot;You need: &quot; + finalGrade + &quot;%&quot;); input.close(); } else{ System.out.print(&quot;Current grade? &quot;); double currentGrade = input.nextDouble(); System.out.println(currentGrade); System.out.print(&quot;Test category weight: &quot;); int testCat = input.nextInt(); System.out.println(testCat); System.out.print(&quot;total points in test category: &quot;); int testCatPoints = input.nextInt(); System.out.println(testCatPoints); System.out.print(&quot;final points: &quot;); int finalPoints = input.nextInt(); System.out.println(finalPoints); System.out.print(&quot;your grade in test category: &quot;); double testCatGrade = input.nextDouble(); System.out.println(testCatGrade); System.out.print(&quot;desired grade: &quot;); double desiredGrade = input.nextDouble(); System.out.println(desiredGrade); double finalScore = ((0.01*testCatGrade*finalPoints*testCat)-(finalPoints*currentGrade)+(finalPoints*desiredGrade)-(currentGrade*testCatPoints)+(testCatPoints*desiredGrade))/testCat; System.out.print(&quot;You need to get at least a &quot; + String.format(&quot;%.2f&quot;, (finalScore/finalPoints)*100) + &quot;% on you final to get a &quot; + desiredGrade); } } } GradeCalculator.main(null); . Is final in a separate category: (true/false) Current grade? 91.23 Test category weight: 80 total points in test category: 650 final points: 150 your grade in test category: 89.6 desired grade: 90.0 You need to get at least a 81.40% on you final to get a 90.0 . Unit 2 Homework - LINK . ##### Unit 2 Notes LINK | . Unit 3 Homework - LINK . ##### Unit 3 Notes LINK | . Unit 4 Homework - LINK . ##### Unit 4 Notes LINK | . Unit 5 Homework - LINK .",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/11/08/final-blog.html",
            "relUrl": "/2022/11/08/final-blog.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 5 Homework",
            "content": "2019 FRQ 2 Answer . public class StepTracker { private int totalSteps; private int minimumSteps; private int days; private int activeDays; public StepTracker(int min){ minimumSteps = min; totalSteps = 0; days = 0; activeDays = 0; } public void addDailySteps(int steps){ totalSteps += steps; days++; if (steps &gt;= minSteps){ activeDays++; } } public double averageSteps(){ if (days == 0){ return 0.0; } else{ return (double) totalSteps / days; } } public int getActiveDays(){ return days; } } .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-5/2022/10/22/cb5-hw.html",
            "relUrl": "/unit-5/2022/10/22/cb5-hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 4 Homework",
            "content": "Caeser Cipher Hack . public class CaesarCipher { public static String cipher(String message, String[] letters, int n) { String newMessage = &quot;&quot;; for (int i=0; i&lt;message.length(); i++) { int index = 0; for (int j=0; j&lt;letters.length; j++) { if (message.substring(i, i+1).equals(letters[j])) { index = j; } } index += n; if (index &gt; 25) { index -= 26; } newMessage += letters[index]; } return newMessage; } public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(cipher(message1, letters, 3)); System.out.println(cipher(message2, letters, 3)); System.out.println(cipher(message3, letters, 3)); } } CaesarCipher.main(null); . dicedjobd codedcodedcode supercalifragilisticexpialidocious .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-4/2022/10/22/cb4-hw.html",
            "relUrl": "/unit-4/2022/10/22/cb4-hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 3 Homework",
            "content": "FRQ 1 - 2019 Exam . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. #### (A) | Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. | isLeapYear(year) returns true if year is a leap year and false otherwise. | Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. | . public static int numberOfLeapYears(int year1, int year2){ int numOfLeapYears = 0; // initialize final count variable for(int i = year1; i &lt;= year2; i++){ // for loop that starts at the year1 number and goes until year 2 including it if(isLeapYear(i)){ // if the year is a leap year, add 1 to the count numOfLeapYears += 1; } } return numOfLeapYears; // return the count } . Scoring (5/5) . Initialize numeric variable (count) 1/1 | Loop through each necessary year in range (for loop, with condition in code block) 1/1 | Calls isLeapYear on valid year in range 1/1 | Update count based on result of isLeapYear 1/1 | Return count of leap years 1/1 | . (B) . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. | For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. | . public static int dayOfWeek(int month, int day, int year){ int date = dayOfYear(month, day, year); // gets current day number int first = firstDayofYear(year); // gets starting day of year int calculated = ((week + start)-1) % 7; // adds starting and current and subtracts one to account for the offset, and divides by 7. remainder determines the day of week return calculated; } . Scoring (4/4) . Call firstDayofYear 1/1 | Calls dayOfYear 1/1 | Calculate value representing day of week (-1, incorrect calculation) 1/1 | Return calculated value 1/1 | . Excercises 1-20 Even Only . Problem 2 . import java.util.Scanner; public class Prob2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;coeff a: &quot;); double a = input.nextDouble(); System.out.println(&quot;coeff b: &quot;); double b = input.nextDouble(); System.out.println(&quot;coeff c: &quot;); double c = input.nextDouble(); double root1 = (-b + (b * b - 4 * a * c)/(2*a)); double root2 = (-b - (b * b - 4 * a * c)/(2*a)); System.out.println(&quot;The roots are &quot; + root1 + &quot; and &quot; + root2); } } Prob2.main(null); . coeff a: coeff b: coeff c: The roots are -139.625 and 109.625 . Problem 4 . public class Prob4 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;num: &quot;); double number = input.nextDouble(); System.out.println(number); if (number &gt; 0) { System.out.println(&quot;pos&quot;); } else if (number == 0) { System.out.println(&quot;zero&quot;); } else { System.out.println(&quot;neg&quot;); } if (number &lt; 1) { System.out.println(&quot;neg&quot;); } else if (number &gt; 1000000) { System.out.println(&quot;too big &quot;); } } } Prob4.main(null); . num: 1356.0 pos . Problem 6 . public class Prob6 { static double truncate(double n, int decimalPlace) { n = n*Math.pow(10, decimalPlace); n = Math.floor(n); n = n/Math.pow(10, decimalPlace); return n; } public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;num 1: &quot;); double number1 = input.nextDouble(); double num1Trun = truncate(number1, 3); System.out.println(number1); System.out.print(&quot;num 2: &quot;); double number2 = input.nextDouble(); double num2Trun = truncate(number2, 3); System.out.println(number2); if (num1Trun == num2Trun) { System.out.println(&quot;true&quot;); } else { System.out.println(&quot;false&quot;); } } } Prob6.main(null); . num 1: 125.6667765 num 2: 125.6660940951 true . Problem 8 . public class Prob8 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;enter letter: &quot;); String letter = input.nextLine(); System.out.println(letter); String[] vowels = {&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot;A&quot;, &quot;E&quot;, &quot;I&quot;, &quot;O&quot;, &quot;U&quot;}; if(letter.length() &gt; 1) { System.out.println(&quot;not one letter&quot;); } else if (!letter.matches(&quot;[a-zA-Z]+&quot;)) { System.out.println(&quot;not a letter&quot;); } else if (vowels.contains(letter)) { System.out.println(&quot;vowel&quot;); } else { System.out.println(&quot;consonant&quot;); } input.close(); } } Prob8.main(null); . enter letter: e vowel . Problem 10 . public class Prob10 { public static void main(String[] args) { int[] n = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; for (int num : n) { System.out.println(num); } } } Prob10.main(null); . 1 2 3 4 5 6 7 8 9 10 . Problem 12 . public class Prob12 { public static void main(String[] args) { int sum = 0; double average; System.out.println(&quot;Input nums:&quot;); Scanner input = new Scanner(System.in); for (int i = 0; i &lt; 5; i++) { int num = input.nextInt(); System.out.println(num); sum += num; } average = sum/5; System.out.println(&quot;sum: &quot; + sum); System.out.println(&quot;avg: &quot; + average); } } Prob12.main(null); . Input nums: 9248357 934867 1342345 257 4 sum: 11525830 avg: 2305166.0 . Problem 14 . public class Prob14 { public static void main(String[] args) { System.out.println(&quot;num: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(&quot;terms: &quot;); int terms = input.nextInt(); for (int i = 0; i &lt;= terms; i++) { System.out.println(num + &quot; x &quot; + i + &quot; = &quot; + num*i); } } } Prob14.main(null); . num: terms: 4 x 0 = 0 4 x 1 = 4 4 x 2 = 8 4 x 3 = 12 4 x 4 = 16 4 x 5 = 20 4 x 6 = 24 4 x 7 = 28 . Problem 16 . public class Prob16 { public static void main(String[] args) { System.out.print(&quot;rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(j); } System.out.println(); } } } Prob16.main(null); . rows: 6 1 12 123 1234 12345 123456 . Prob 18 . public class Prob18 { public static void main(String[] args) { System.out.print(&quot;rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); int count = 1; for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(count + &quot; t&quot;); count++; } System.out.println(); } } } Prob18.main(null); . rows: 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . Problem 20 . public class Prob20 { public static void main(String[] args) { System.out.print(&quot;rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); int count = 1; for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(count + &quot; t&quot;); count++; } System.out.println(); } } } Prob20.main(null); . rows: 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-3/2022/10/22/cb3-hw.html",
            "relUrl": "/unit-3/2022/10/22/cb3-hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 2 Homework",
            "content": "FRQ 2021 1a . public int scoreGuess (String guess){ int count = 0; for (int i=0; i&lt;= secret.length()-guess.length(); i++){ if (secret.substring(i, i+guess.length()).equals(guess)){ count++; } } return count*guess.length()*guess.length() } . FRQ 2021 1b . public String findBetterGuess(String guess1, String guess2){ if (scoreGuess(guess1) &gt; scoreGuess(guess2)){ return guess1; } else if (scoreGuess(guess2) &gt; scoreGuess(guess1)){ return guess1p } if (guess1.compareTo(guess2) &gt; 0){ return guess1; } else{ return guess2; } } . Google Form Quiz . .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-2/2022/10/22/cb2-hw.html",
            "relUrl": "/unit-2/2022/10/22/cb2-hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 8 Requirements",
            "content": "Week 8 Ticket . Scored by Tristan: 2.7+ . code.org requirements met, organized CB learning and did a little bit extra for primitives with a grade calculator | . Unit 1 and 2 Blogs . Unit 1 LINK | Unit 2 LINK | . Link to CTE Planning . Link to CTE Planning | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/10/17/week-8.html",
            "relUrl": "/tickets/2022/10/17/week-8.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2 Objects",
            "content": "Objects . Objects are instances of Classes, which are like a template of data (attributes) and functions (methods) | Objects are created and their contents, which are pulled from the class, is used in code | Examples below: | . Creating a class with a method . public class Tennis { // class creation public void printPlayers(){ // simple method System.out.println(&quot;Nadal&quot;); System.out.println(&quot;Federer&quot;); System.out.println(&quot;Djokovic&quot;); } public static void main(String[] args){ // main class that runs Tennis myObject = new Tennis(); // CREATING AN OBJECT FROM TENNIS CLASS myObject.printPlayers(); // Use dot notation to reference methods/attributes from the class that the object is initialized from } } Tennis.main(null); . Nadal Federer Djokovic . Inheritance . Extending another Class inherits all of the methods and attributes from that class. | Class being extended is called the super class | Class extending is called subclass | . public class TennisTwo extends Tennis{ // extending Tennis class public TennisTwo(){ // TennisTwo now has all of Tennis&#39;s methods super(); } public static void main(String[] args){ // main class that runs TennisTwo myObjectTwo = new TennisTwo(); // CREATING AN OBJECT FROM TENNISTWO CLASS myObjectTwo.printPlayers(); // Use dot notation to reference methods/attributes from the INHERITED class } } TennisTwo.main(null); . Nadal Federer Djokovic . HACK - Console Menu . Click Here to Go to Hack . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-2/2022/10/16/unit-2-blog.html",
            "relUrl": "/unit-2/2022/10/16/unit-2-blog.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 1 Primitives",
            "content": "Primitives . 8 primitive types in Java including: . int | byte | short | long | float | double | boolean | char | . | Integer types have a range from -2147483648 to 2147483647 (32 bits) . | Byte types have a range from -128 to 127 (8 bits) | Short types have a range from -32768 to 32767 (16 bits) | Long types have a range from -9223372036854775808 to 9223372036854775807 (64 bits) | Floats are used for decimal approximations have a 32 bit range | Doubles are used for decimal approximations and have a 64 bit range | Char type is singular character | . Explicit Initialization: . In Java, when a variable is created, it must be explicitly declared by the type of data it holds | Using an &quot;=&quot; assigns values to the variable | Examples below: | . public class Example{ static public void main(String[] args){ int age; // declares the age variable as an integer char letter; // declares the letter variable as a character age = 14; letter = &#39;h&#39;; System.out.println(&quot;age: &quot; + age); System.out.println(&quot;letter: &quot; + letter); } } Example.main(null); . age: 14 letter: h . Hack - Calculator using Primitives . Un-weighted GPA calculator . Details: . Uses doubles and int to store data about each grade&#39;s weight and percentages | Uses String (wrapper), which is an object, to hold character information for letter grade input | . public class GPACalculator { public static void main(String[] args) { Scanner input = new Scanner(System.in); String letterGrades = &quot;&quot;; double weight; double sum = 0.00; int num = 1; double classes = 0; System.out.print(&quot;Number of classes you are taking this trimester: n&quot;); classes = input.nextInt(); for (int i = 0; i &lt; classes; i++) { Scanner input2 = new Scanner(System.in); System.out.print(&quot;What is your Grade in Period &quot; + num + &quot;? &gt; &quot;); letterGrades = input2.nextLine(); System.out.print(letterGrades + &quot; n&quot;); if (letterGrades.equals(&quot;A&quot;)){ weight = 4.00; sum += weight; } else if (letterGrades.equals(&quot;B&quot;)){ weight = 3.00; sum += weight; } else if (letterGrades.equals(&quot;C&quot;)){ weight = 2.00; sum += weight; } else if (letterGrades.equals(&quot;D&quot;)){ weight = 1.00; sum += weight; } else if (letterGrades.equals(&quot;F&quot;)){ weight = 0.00; sum += weight; } num = num + 1; } double GPA = sum / classes; System.out.println(&quot;Your Un-weighted GPA is:&quot; + GPA); } } GPACalculator.main(null); . Number of classes you are taking this trimester: What is your Grade in Period 1? &gt; A What is your Grade in Period 2? &gt; B What is your Grade in Period 3? &gt; A What is your Grade in Period 4? &gt; C What is your Grade in Period 5? &gt; C Your Un-weighted GPA is:3.0 .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-1/2022/10/16/unit-1-blog.html",
            "relUrl": "/unit-1/2022/10/16/unit-1-blog.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Fetch of Backend API",
            "content": "Recipe Yummy Yucky .",
            "url": "https://akhilnandhakumar.github.io/CSA/api/frontend",
            "relUrl": "/api/frontend",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "ArrayLists and Lists",
            "content": "Demonstrating Usage of all Methods . import java.util.ArrayList; import java.util.Comparator; public class Main { public static void main(String[] args) { // Creating 2 arraylists ArrayList&lt;String&gt; notPro = new ArrayList&lt;String&gt;(); ArrayList&lt;String&gt; Pro = new ArrayList&lt;String&gt;(); // Adding without index notPro.add(&quot;Akhil&quot;); notPro.add(&quot;Nakul&quot;); System.out.println(&quot;List 1 add() without index:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // list 1 adding with index notPro.add(0, &quot;Nathan&quot;); notPro.add(2, &quot;Rebecca&quot;); System.out.println(&quot;List 1 add() harsha at index 0, and nakul at index 2:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // size() System.out.println(&quot;Size of list 1:&quot; + &quot; n&quot; + notPro.size() + &quot; n&quot;); // Adding list 2 to list 1 using addAll() Pro.add(&quot;Federer&quot;); Pro.add(&quot;Nadal&quot;); Pro.add(&quot;Alcaraz&quot;); notPro.addAll(Pro); System.out.println(&quot;addAll() adding without index:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // Adding list 2 to list 1 with index notPro.clear(); notPro.add(&quot;Akhil&quot;); notPro.add(&quot;Nakul&quot;); notPro.add(0, &quot;Nathan&quot;); notPro.add(2, &quot;Rebecca&quot;); notPro.addAll(2, Pro); System.out.println(&quot;addAll() adding at index 2:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // remove(int) index notPro.remove(6); System.out.println(&quot;remove() at index 6:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // remove(element) notPro.remove(&quot;Rebecca&quot;); System.out.println(&quot;remove() Rebecca:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // get(index) System.out.println(&quot;Get element at index 2:&quot; + &quot; n&quot; + notPro.get(2) + &quot; n&quot;); // set(index) System.out.print(&quot;Set element at index 2:&quot; + &quot; n&quot; + &quot;Before: &quot;); System.out.println(notPro); notPro.set(2, &quot;Djokovic&quot;); System.out.println(&quot;After: &quot; + notPro + &quot; n&quot;); // indexOf(element) System.out.println(&quot;indexOf Akhil:&quot; + &quot; n&quot; + notPro.indexOf(&quot;Akhil&quot;) + &quot; n&quot;); notPro.add(&quot;Akhil&quot;); //temp for next method // lastIndexOf(element) System.out.println(&quot;Last index of Akhil: &quot; + notPro.lastIndexOf(&quot;Akhil&quot;) + &quot; n&quot; + notPro + &quot; n&quot;); // equals(element) System.out.println(&quot; Equals Akhil: &quot; + notPro.equals(&quot;Akhil&quot;) + &quot; n&quot;); // hascode() System.out.println(&quot;Hash Code: &quot; + notPro.hashCode() + &quot; n&quot;); // isEmpty() System.out.println(&quot;Is the arraylist empty: &quot; + notPro.isEmpty() + &quot; n&quot;); // contains(element) System.out.println(&quot;Does arraylist contain &#39;Akhil&#39;: &quot; + notPro.contains(&quot;Akhil&quot;) + &quot; n&quot;); // containsAll(collection) System.out.println(&quot;Does arraylist contain Pro collection?: &quot; + &quot; n&quot; + &quot;Pro collection: &quot; + Pro ); System.out.println(notPro.containsAll(Pro) + &quot; n&quot;); notPro.add(&quot;Federer&quot;); // Adding missing element System.out.println(&quot;Does arraylist contain Pro collection?: &quot; + &quot; n&quot; + &quot;New Pro collection: &quot; + Pro ); System.out.println(notPro.containsAll(Pro) + &quot; n&quot;); // sort(comparator) System.out.println(&quot;Unsorted: &quot; + notPro); notPro.sort(Comparator.naturalOrder()); System.out.println(&quot;Sorted using natural alphabetical order comparator: &quot; + notPro + &quot; n&quot;); // clear() notPro.clear(); Pro.clear(); System.out.println(&quot;Cleared list1:&quot; + &quot; n&quot; + notPro); System.out.println(&quot;Cleared list2:&quot; + &quot; n&quot; + Pro); } } Main.main(null); . List 1 add() without index: [Akhil, Nakul] List 1 add() harsha at index 0, and nakul at index 2: [Nathan, Akhil, Rebecca, Nakul] Size of list 1: 4 addAll() adding without index: [Nathan, Akhil, Rebecca, Nakul, Federer, Nadal, Alcaraz] addAll() adding at index 2: [Nathan, Akhil, Federer, Nadal, Alcaraz, Rebecca, Nakul] remove() at index 6: [Nathan, Akhil, Federer, Nadal, Alcaraz, Rebecca] remove() Rebecca: [Nathan, Akhil, Federer, Nadal, Alcaraz] Get element at index 2: Federer Set element at index 2: Before: [Nathan, Akhil, Federer, Nadal, Alcaraz] After: [Nathan, Akhil, Djokovic, Nadal, Alcaraz] indexOf Akhil: 1 Last index of Akhil: 5 [Nathan, Akhil, Djokovic, Nadal, Alcaraz, Akhil] Equals Akhil: false Hash Code: -419671130 Is the arraylist empty: false Does arraylist contain &#39;Akhil&#39;: true Does arraylist contain Pro collection?: Pro collection: [Federer, Nadal, Alcaraz] false Does arraylist contain Pro collection?: New Pro collection: [Federer, Nadal, Alcaraz] true Unsorted: [Nathan, Akhil, Djokovic, Nadal, Alcaraz, Akhil, Federer] Sorted using natural alphabetical order comparator: [Akhil, Akhil, Alcaraz, Djokovic, Federer, Nadal, Nathan] Cleared list1: [] Cleared list2: [] . Trying 2D Arrays to hold Student Information . import java.util.ArrayList; import java.util.List; public class Java2DArrayList { public static void main(String[] args) { ArrayList&lt;List&gt; arraylist2D = new ArrayList&lt;List&gt;(); List student1=new ArrayList(); student1.add(&quot;Akhil&quot;); student1.add(&quot;Period 2&quot;); student1.add(&quot;Mortensen&quot;); List student2=new ArrayList(); student2.add(&quot;Re&#39;em&quot;); student2.add(&quot;Period 2&quot;); student2.add(&quot;Mortensen&quot;); List student3=new ArrayList(); student3.add(&quot;Saathvika&quot;); student3.add(&quot;Period 2&quot;); student3.add(&quot;Mortensen&quot;); List student4=new ArrayList(); student4.add(&quot;Tristan&quot;); student4.add(&quot;Period 2&quot;); student4.add(&quot;Mortensen&quot;); arraylist2D.add(student1); arraylist2D.add(student2); arraylist2D.add(student3); System.out.println(arraylist2D); } } Java2DArrayList.main(null); . [[Akhil, Period 2, Mortensen], [Re&#39;em, Period 2, Mortensen], [Saathvika, Period 2, Mortensen]] .",
            "url": "https://akhilnandhakumar.github.io/CSA/lists",
            "relUrl": "/lists",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Week 6 Hacks and Requirements | Design Approval",
            "content": "Images . Link | . API . Link | . Team Review . Team Ticket | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/10/04/week-6.html",
            "relUrl": "/tickets/2022/10/04/week-6.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Java RapidAPI",
            "content": "Java and RapidAPI use case . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . An HttpClient can be used to send requests and retrieve their responses | An HttpRequest sets up header and body to API provider | An HttpResponse is returned as a result of sending an HttpRequest | Typically a response body will be received, if all goes well | Next step, is to format the response body according to your data science needs | . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . Build your own Web Service . To build a Web Service in the backend allows you to control information and errors between your app and the user. A proper Web Service requires more code:RESTful interface, error handling, and in this case reducing the calls to the service according to update frequency.- There are benefits of building service in Java vs JavaScript: . - Firewall will not be blocked as backend server on AWS is outside the firewall - Selecting frontend service https://nighthawkcodingsociety.com that has been cleared through IT. - Many APIs have usage costs or usage limits, backend can serve while limiting direct API access. . Project link: https://github.com/nighthawkcoders/spring_portfolio/blob/master/src/main/java/com/nighthawk/spring_portfolio/mvc/covid/CovidApiController.java | . package com.nighthawk.spring_portfolio.mvc.covid; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . Hack - API Raw Output . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://ultimate-tennis1.p.rapidapi.com/live_leaderboard/50&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;af654d789amshce4b35d071f3bd2p1c0cc8jsn8db3aa6a8acc&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;ultimate-tennis1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . { &#34;Players&#34;: &#34;50&#34;, &#34;data&#34;: [ { &#34;Age&#34;: &#34;19&#34;, &#34;Championship Points&#34;: &#34;7,240&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;6,740&#34;, &#34;Name&#34;: &#34;Carlos Alcaraz&#34;, &#34;Next win points&#34;: &#34;6,785&#34;, &#34;Points&#34;: &#34;6,740&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 1, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;a0e2&#34; }, { &#34;Age&#34;: &#34;36&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;5,810&#34;, &#34;Name&#34;: &#34;Rafael Nadal&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;5,810&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 2, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;n409&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;6,100&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;5,645&#34;, &#34;Name&#34;: &#34;Casper Ruud&#34;, &#34;Next win points&#34;: &#34;5,645&#34;, &#34;Points&#34;: &#34;5,645&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 3, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;rh16&#34; }, { &#34;Age&#34;: &#34;26&#34;, &#34;Championship Points&#34;: &#34;5,565&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;5,065&#34;, &#34;Name&#34;: &#34;Daniil Medvedev&#34;, &#34;Next win points&#34;: &#34;5,110&#34;, &#34;Points&#34;: &#34;5,065&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 4, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;mm58&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;5,040&#34;, &#34;Name&#34;: &#34;Alexander Zverev&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;5,040&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 5, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;z355&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;5,265&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;4,810&#34;, &#34;Name&#34;: &#34;Stefanos Tsitsipas&#34;, &#34;Next win points&#34;: &#34;4,810&#34;, &#34;Points&#34;: &#34;4,810&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 6, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;te51&#34; }, { &#34;Age&#34;: &#34;35&#34;, &#34;Championship Points&#34;: &#34;4,320&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;3,820&#34;, &#34;Name&#34;: &#34;Novak Djokovic&#34;, &#34;Next win points&#34;: &#34;3,865&#34;, &#34;Points&#34;: &#34;3,820&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 7, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;d643&#34; }, { &#34;Age&#34;: &#34;27&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;3,445&#34;, &#34;Name&#34;: &#34;Cameron Norrie&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;3,445&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 8, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;n771&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;3,800&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;3,345&#34;, &#34;Name&#34;: &#34;Andrey Rublev&#34;, &#34;Next win points&#34;: &#34;3,345&#34;, &#34;Points&#34;: &#34;3,345&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 9, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;re44&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;3,675&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;3,175&#34;, &#34;Name&#34;: &#34;Hubert Hurkacz&#34;, &#34;Next win points&#34;: &#34;3,220&#34;, &#34;Points&#34;: &#34;3,175&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 10, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;hb71&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;3,510&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;3,055&#34;, &#34;Name&#34;: &#34;Taylor Fritz&#34;, &#34;Next win points&#34;: &#34;3,055&#34;, &#34;Points&#34;: &#34;3,055&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 11, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;fb98&#34; }, { &#34;Age&#34;: &#34;21&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;3,040&#34;, &#34;Name&#34;: &#34;Jannik Sinner&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;3,040&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 12, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;s0ag&#34; }, { &#34;Age&#34;: &#34;22&#34;, &#34;Championship Points&#34;: &#34;3,405&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;2,950&#34;, &#34;Name&#34;: &#34;Felix Auger-Aliassime&#34;, &#34;Next win points&#34;: &#34;2,950&#34;, &#34;Points&#34;: &#34;2,950&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 13, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;ag37&#34; }, { &#34;Age&#34;: &#34;34&#34;, &#34;Championship Points&#34;: &#34;2,995&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;2,495&#34;, &#34;Name&#34;: &#34;Marin Cilic&#34;, &#34;Next win points&#34;: &#34;2,540&#34;, &#34;Points&#34;: &#34;2,495&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 14, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;c977&#34; }, { &#34;Age&#34;: &#34;31&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;2,360&#34;, &#34;Name&#34;: &#34;Pablo Carreno Busta&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;2,360&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 15, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;cd85&#34; }, { &#34;Age&#34;: &#34;26&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;2,360&#34;, &#34;Name&#34;: &#34;Matteo Berrettini&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;2,360&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 16, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;bk40&#34; }, { &#34;Age&#34;: &#34;30&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;2,110&#34;, &#34;Name&#34;: &#34;Diego Schwartzman&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;2,110&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 17, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;sm37&#34; }, { &#34;Age&#34;: &#34;26&#34;, &#34;Championship Points&#34;: &#34;2,445&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,990&#34;, &#34;Name&#34;: &#34;Karen Khachanov&#34;, &#34;Next win points&#34;: &#34;1,990&#34;, &#34;Points&#34;: &#34;1,990&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 18, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;ke29&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;2,440&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,940&#34;, &#34;Name&#34;: &#34;Frances Tiafoe&#34;, &#34;Next win points&#34;: &#34;1,985&#34;, &#34;Points&#34;: &#34;1,940&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 19, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;td51&#34; }, { &#34;Age&#34;: &#34;27&#34;, &#34;Championship Points&#34;: &#34;2,280&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,780&#34;, &#34;Name&#34;: &#34;Nick Kyrgios&#34;, &#34;Next win points&#34;: &#34;1,825&#34;, &#34;Points&#34;: &#34;1,780&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 20, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;ke17&#34; }, { &#34;Age&#34;: &#34;34&#34;, &#34;Championship Points&#34;: &#34;2,250&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,760&#34;, &#34;Name&#34;: &#34;Roberto Bautista Agut&#34;, &#34;Next win points&#34;: &#34;1,795&#34;, &#34;Points&#34;: &#34;1,760&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 21, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;bd06&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;2,245&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,745&#34;, &#34;Name&#34;: &#34;Denis Shapovalov&#34;, &#34;Next win points&#34;: &#34;1,790&#34;, &#34;Points&#34;: &#34;1,745&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 22, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;su55&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;2,200&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,745&#34;, &#34;Name&#34;: &#34;Alex de Minaur&#34;, &#34;Next win points&#34;: &#34;1,745&#34;, &#34;Points&#34;: &#34;1,745&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 23, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;dh58&#34; }, { &#34;Age&#34;: &#34;31&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,640&#34;, &#34;Name&#34;: &#34;Grigor Dimitrov&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,640&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 24, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;d875&#34; }, { &#34;Age&#34;: &#34;32&#34;, &#34;Championship Points&#34;: &#34;1,970&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,490&#34;, &#34;Name&#34;: &#34;Daniel Evans&#34;, &#34;Next win points&#34;: &#34;1,515&#34;, &#34;Points&#34;: &#34;1,490&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 25, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;e687&#34; }, { &#34;Age&#34;: &#34;19&#34;, &#34;Championship Points&#34;: &#34;1,953&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,461&#34;, &#34;Name&#34;: &#34;Holger Rune&#34;, &#34;Next win points&#34;: &#34;1,498&#34;, &#34;Points&#34;: &#34;1,461&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 26, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;r0dg&#34; }, { &#34;Age&#34;: &#34;20&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,437&#34;, &#34;Name&#34;: &#34;Lorenzo Musetti&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,437&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 27, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;m0ej&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;1,905&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,405&#34;, &#34;Name&#34;: &#34;Borna Coric&#34;, &#34;Next win points&#34;: &#34;1,450&#34;, &#34;Points&#34;: &#34;1,405&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 28, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;cg80&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;1,879&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,394&#34;, &#34;Name&#34;: &#34;Francisco Cerundolo&#34;, &#34;Next win points&#34;: &#34;1,424&#34;, &#34;Points&#34;: &#34;1,394&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 29, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;c0au&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;1,375&#34;, &#34;Name&#34;: &#34;Tommy Paul&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;1,375&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 30, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;pl56&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;1,860&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,370&#34;, &#34;Name&#34;: &#34;Alejandro Davidovich Fokina&#34;, &#34;Next win points&#34;: &#34;1,405&#34;, &#34;Points&#34;: &#34;1,370&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 31, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;dh50&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;1,728&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,269&#34;, &#34;Name&#34;: &#34;Maxime Cressy&#34;, &#34;Next win points&#34;: &#34;1,273&#34;, &#34;Points&#34;: &#34;1,269&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 32, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;c0bc&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;1,750&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,256&#34;, &#34;Name&#34;: &#34;Miomir Kecmanovic&#34;, &#34;Next win points&#34;: &#34;1,295&#34;, &#34;Points&#34;: &#34;1,256&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 33, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;ki95&#34; }, { &#34;Age&#34;: &#34;26&#34;, &#34;Championship Points&#34;: &#34;1,707&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,233&#34;, &#34;Name&#34;: &#34;Botic van de Zandschulp&#34;, &#34;Next win points&#34;: &#34;1,252&#34;, &#34;Points&#34;: &#34;1,233&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 34, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;v812&#34; }, { &#34;Age&#34;: &#34;21&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,205&#34;, &#34;Name&#34;: &#34;Sebastian Baez&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,205&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 35, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;b0bi&#34; }, { &#34;Age&#34;: &#34;30&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;1,185&#34;, &#34;Name&#34;: &#34;Nikoloz Basilashvili&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;1,185&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 36, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;bg23&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,185&#34;, &#34;Name&#34;: &#34;Reilly Opelka&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,185&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 37, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;o522&#34; }, { &#34;Age&#34;: &#34;36&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,105&#34;, &#34;Name&#34;: &#34;Gael Monfils&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,105&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 38, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;mc65&#34; }, { &#34;Age&#34;: &#34;29&#34;, &#34;Championship Points&#34;: &#34;1,585&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,085&#34;, &#34;Name&#34;: &#34;Aslan Karatsev&#34;, &#34;Next win points&#34;: &#34;1,130&#34;, &#34;Points&#34;: &#34;1,085&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 39, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;kc56&#34; }, { &#34;Age&#34;: &#34;34&#34;, &#34;Championship Points&#34;: &#34;1,565&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,085&#34;, &#34;Name&#34;: &#34;Albert Ramos-Vinolas&#34;, &#34;Next win points&#34;: &#34;1,110&#34;, &#34;Points&#34;: &#34;1,085&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 40, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;r772&#34; }, { &#34;Age&#34;: &#34;27&#34;, &#34;Championship Points&#34;: &#34;1,569&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,077&#34;, &#34;Name&#34;: &#34;Yoshihito Nishioka&#34;, &#34;Next win points&#34;: &#34;1,114&#34;, &#34;Points&#34;: &#34;1,077&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 41, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;n732&#34; }, { &#34;Age&#34;: &#34;21&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,072&#34;, &#34;Name&#34;: &#34;Jenson Brooksby&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,072&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 42, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;b0cd&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;1,525&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,045&#34;, &#34;Name&#34;: &#34;Alexander Bublik&#34;, &#34;Next win points&#34;: &#34;1,070&#34;, &#34;Points&#34;: &#34;1,045&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 43, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;bk92&#34; }, { &#34;Age&#34;: &#34;37&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;1,005&#34;, &#34;Name&#34;: &#34;John Isner&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;1,005&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 44, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;i186&#34; }, { &#34;Age&#34;: &#34;22&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;985&#34;, &#34;Name&#34;: &#34;Sebastian Korda&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;985&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 45, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;k0ah&#34; }, { &#34;Age&#34;: &#34;35&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;975&#34;, &#34;Name&#34;: &#34;Andy Murray&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;975&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 46, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;mc10&#34; }, { &#34;Age&#34;: &#34;21&#34;, &#34;Championship Points&#34;: &#34;1,454&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;974&#34;, &#34;Name&#34;: &#34;Brandon Nakashima&#34;, &#34;Next win points&#34;: &#34;999&#34;, &#34;Points&#34;: &#34;974&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 47, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;n0ae&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;971&#34;, &#34;Name&#34;: &#34;Alex Molcan&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;971&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 48, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;mv14&#34; }, { &#34;Age&#34;: &#34;20&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;961&#34;, &#34;Name&#34;: &#34;Jack Draper&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;961&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 49, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;d0co&#34; }, { &#34;Age&#34;: &#34;27&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;960&#34;, &#34;Name&#34;: &#34;Lorenzo Sonego&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;960&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 50, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;su87&#34; } ] } .",
            "url": "https://akhilnandhakumar.github.io/CSA/api",
            "relUrl": "/api",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Arrays and Images",
            "content": "Saving PNG to GIF . Image IO read and Image IO write are focus of this code. A key portion of working with Images, or any file, is to know location of the input and output directories. . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . Image Scaling and ASCII Conversion . In this example we print out a row of text for each row in the image. However, it seems as if the image is too tall. To address this problem, try to output a single character per block of pixels. In particular, average the grayscale values in a rectangular block that’s twice as tall as it is wide, and print out a single character for this block. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/50.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics python = new Pics(&quot;pythonlogo&quot;, &quot;png&quot;); python.printStats(&quot;Original&quot;); python.resize(12); python.printStats(&quot;Scaled&quot;); python.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 111833 257x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 16772 199x87 images/tmp/pumpkin.png Original: 33539 1024x1024 images/pythonlogo.png Scaled: 5225 246x123 images/tmp/pythonlogo.png . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Hacks . Continue to work with Classes, Arrays, and 2D arrays. FYI, you may need to make a directory /tmp under notebook images. . Look at comments above and see if there is better conversions for ASCII to reduce elongation and distortion. | Try to convert images into Grey Scale, Red Scale, Blue Scale, and Green Scale. | Additional Image Code . Runtime using Thymeleaf . Better Scaling for ASCII . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Scaled Ascii&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Scaled Ascii&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Scaled Ascii: 499298 389x413 images/MonaLisa.png Scaled Ascii: 39392 302x265 images/pumpkin.png . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://akhilnandhakumar.github.io/CSA/arrayimages",
            "relUrl": "/arrayimages",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Week 5 Hacks and Requirements | Design Starter",
            "content": "Fibonacci Link . Link | . JS/HTML . Link | . Team Review . Team Ticket | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/26/week-5.html",
            "relUrl": "/tickets/2022/09/26/week-5.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "JavaScript Tutorial",
            "content": "JavaScript references . JavaScript is the most important language you need to learn as a frontend developer. It&#39;s a great first language for web developers to learn. . W3Schools - reference | feecodecamp.org - pbl . | javascript30.com - pbl . | . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each index in the Array. | Return part create the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . Reference . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . Timer . There are ways to setup a delay. . Reference . $$.async(); console.log(&quot;Hello, World!&quot;); var action = { $$: $$, console: console, }; setTimeout(function() { $$.clear(0); // clear output cell action.$$.sendResult(&quot;Goodbye!&quot;); }, 2000); // 2 second timer . &#39;Goodbye!&#39; . Hacks . Objective of JavaScript is to produce frontend code. Working in Jupyter Notebooks could help in the process of visualizing design with short and interactive feedback. However, my hope is that you move to Fastpages and play with Frontend code in that environment and do the REAL thing. Here is my suggestion. . Design at least one screen with data from a structure (like Person data above), that is used to dynamically create HTML. As an alternative to HTML text method above, look at Jokes post and usage createElement... . BACKEND JS . const resultContainer = document.getElementById(&quot;result&quot;); // function holds data for players function Player(name, nationality, rank) { this.name = name; this.nationality = nationality; this.rank = rank; } // json conversion function Player.prototype.toJSON = function() { const obj = {name:this.name, nationality: this.nationality, rank: this.rank}; const json = JSON.stringify(obj); return json; } // list of players var list = [ new Player( &quot;Spain&quot;, &quot;#1&quot;, &quot;Carlos Alcaraz Garfia&quot;), new Player( &quot;Russia&quot;, &quot;#4&quot;, &quot;Danil Medvedev&quot;), new Player( &quot;Norway&quot;, &quot;#2&quot;, &quot;Casper Ruud&quot;), new Player( &quot;Spain&quot;, &quot;#3&quot;, &quot;Rafael Nadal&quot;), new Player( &quot;USA&quot;, &quot;#2885893&quot;, &quot;Akhil Nandhakumar&quot;), new Player( &quot;USA&quot;, &quot;GOAT&quot;, &quot;Mr. Mort&quot;), new Player( &quot;Test&quot;, &quot;#10&quot;, &quot;Test&quot;) ]; function PlayerClass(players){ this.PlayerClass = players; this.json = []; this.PlayerClass.forEach(players =&gt; this.json.push(players.toJSON())); } // creates playerlist object playerlist = new PlayerClass(list); // javascript variables and methods to build html using previous data for (const row of playerlist.PlayerClass) { const tr = document.createElement(&quot;tr&quot;); const name = document.createElement(&quot;td&quot;); const id = document.createElement(&quot;td&quot;); const rank = document.createElement(&quot;td&quot;); name.innerHTML = row.name; id.innerHTML = row.nationality; rank.innerHTML = row.rank; tr.appendChild(rank); tr.appendChild(name); tr.appendChild(id); resultContainer.appendChild(tr); } . FRONTEND HTML . &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Nationality&lt;/th&gt; &lt;th&gt;Rank&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;/tbody&gt; &lt;/table&gt; .",
            "url": "https://akhilnandhakumar.github.io/CSA/js-html/",
            "relUrl": "/js-html/",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Fibonacci",
            "content": "Base Code . modified so that init is abstract, no code/runtime from init method | . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); // System.out.println(&quot;fibonacci List = &quot; + this.list); // System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } } . Extending: For Loop . public class FiboFor extends Fibo { public FiboFor() { super(); } public FiboFor(int nth) { super(nth); } protected void init() { super.name = &quot;For&quot;; long limit = this.size; // for loops are likely the most common iteration structure, all the looping facts are in one line for (long[] f = new long[]{0, 1}; limit-- &gt; 0; f = new long[]{f[1], f[0] + f[1]}) this.setData(f[0]); } static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For fibonacci Number 10 = 34 fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Extending: Recursive Loop . public class FiboRecursive extends Fibo{ public FiboRecursive() { super(5); } public FiboRecursive(int nth) { super(nth); } public void recursion(long limit, long[] f) { if (limit == 0) return; this.setData(f[0]); recursion(--limit, new long[]{f[1], f[0] + f[1]}); } protected void init() { super.name = &quot;Recursion&quot;; long limit = this.size; long[] f = new long[]{0, 1}; recursion(limit,f); } static public void main(String[] args) { FiboRecursive fib = new FiboRecursive(); fib.print(); } } FiboRecursive.main(null); . Init method = Recursion fibonacci Number 5 = 3 fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] . Extending: While Loop . public class FiboWhile extends Fibo { public FiboWhile() { super(20); } public FiboWhile(int nth) { super(nth); } protected void init() { super.name = &quot;While&quot;; long limit = this.size; long[] f = new long[]{0, 1}; while (limit-- &gt; 0) { this.setData(f[0]); f = new long[]{f[1], f[0] + f[1]}; } } static public void main(String[] args) { FiboWhile fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . College Board Skills . Skill 1.B:Determine code that would be used to complete code segments (ie For, While, Recursion): See table of contents for each code segment with different types of loops | . | Skill 4.C: Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) From the outputs, we can see that each code segment yields the same result. We can also make sure that the correct type of loop is running because of the print statements that show which function is being run, since each has a unique name associ | . | Skill 5.A: Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) . The recursion code segment iterates by running the function called &quot;recursion&quot;, which called the setdata method, and then re-runs itself by calling itself, and reducing limit by 1 each time, until limit = 0. | The while loop does the same as the recursive loop, but instead of calling itself over and over again, the loop is built into the &quot;while&quot; statement, which loops while (limit-- &gt; 0), which reduces limit each time by 1. | . | Noted: Did not need to use @override since the original init method from superclass did not have any code inside. Extending and modifying init worked without using @override . | .",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/09/23/fibonacci.html",
            "relUrl": "/2022/09/23/fibonacci.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Week 4 Hacks and Requirements | 2D Arrays",
            "content": "2d Array Minilab . Link | . FRQ 1 - 2019 . Link | . Extra . Team Progress | implemented tristan’s solar system: LINK | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/20/week-4.html",
            "relUrl": "/tickets/2022/09/20/week-4.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "FRQ 1 - 2019 Exam",
            "content": "The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. #### (A) | Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. | isLeapYear(year) returns true if year is a leap year and false otherwise. | Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. | . public static int numberOfLeapYears(int year1, int year2){ int numOfLeapYears = 0; // initialize final count variable for(int i = year1; i &lt;= year2; i++){ // for loop that starts at the year1 number and goes until year 2 including it if(isLeapYear(i)){ // if the year is a leap year, add 1 to the count numOfLeapYears += 1; } } return numOfLeapYears; // return the count } . Scoring (5/5) . Initialize numeric variable (count) 1/1 | Loop through each necessary year in range (for loop, with condition in code block) 1/1 | Calls isLeapYear on valid year in range 1/1 | Update count based on result of isLeapYear 1/1 | Return count of leap years 1/1 | . (B) . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. | For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. | . public static int dayOfWeek(int month, int day, int year){ int date = dayOfYear(month, day, year); // gets current day number int first = firstDayofYear(year); // gets starting day of year int calculated = ((week + start)-1) % 7; // adds starting and current and subtracts one to account for the offset, and divides by 7. remainder determines the day of week return calculated; } . Scoring (4/4) . Call firstDayofYear 1/1 | Calls dayOfYear 1/1 | Calculate value representing day of week (-1, incorrect calculation) 1/1 | Return calculated value 1/1 | .",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/09/20/frq1.html",
            "relUrl": "/2022/09/20/frq1.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "2D Arrays and Iteration Lab",
            "content": "BASE CODE . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . HACK 2 &amp; 3 . Included rest of the poem, conditionals, and changing monkey properties | All COMMENTS REMOVED except for lines where code was changed | . class MonkeyLoop { String [][] monkeys; public MonkeyLoop() { monkeys = new String[][]{ //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot;--tristan--&quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++re&#39;em++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-akhil-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot;==not mort== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot;==harambe== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { for (int col = 0; col &lt; monkeys[col].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { System.out.print(monkeys[row][col]); System.out.print(&quot; t&quot;); } System.out.println(); } // Added the rest of the poem under the monkey print if (i &gt; 1){ System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); } else{ System.out.println(i + &quot; little monkey jumping on the bed...&quot;); } System.out.println(&quot;One fell down and bumped his head!&quot;); System.out.println(&quot;Mama called the doctor and the doctor said:&quot;); if (i == 1){ // if there is one monkey left, print the last line System.out.println(&quot;Put those monkeys right to bed!&quot;); } else{ System.out.println(&quot;No more monkey&#39;s jumping on the bed!&quot;); } System.out.println(); monkeyCount -= 1; } System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --tristan-- ++re&#39;em++ &lt;-akhil-&gt; ==not mort== ==harambe== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 5 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --tristan-- ++re&#39;em++ &lt;-akhil-&gt; ==not mort== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 4 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --tristan-- ++re&#39;em++ &lt;-akhil-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 3 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --tristan-- ++re&#39;em++ ⎛ ⎞ ⌋ ⌊ 2 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --tristan-- ⎛ ⎞ 1 little monkey jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: Put those monkeys right to bed! 0000000000000000000000000000000000 THE END . HACK 4 - Monkey Objects . All COMMENTS REMOVED except for lines where code was changed | . public class Monkey { String [][] monkey = new String[][]{ // 2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; _⎐_/ &quot;, &quot; &lt;-akhil-&gt; &quot;, &quot; 〈 〉 &quot; }, }; String firstLine; // gets each body part as a single string String secondLine; String thirdLine; String fourthLine; // method to distinguish body parts public Monkey() { firstLine = monkey[0][0]; secondLine = monkey[0][1]; thirdLine = monkey[0][2]; fourthLine = monkey[0][3]; } // outputting each body part public void getMonkey(){ System.out.println(this.firstLine); System.out.println(this.secondLine); System.out.println(this.thirdLine); System.out.println(this.fourthLine); } } public class MonkeyPrint { // main method to print monkey as an object public static void main(String[] args) { Monkey monkey = new Monkey(); // creates the monkey object from the monkey class monkey.getMonkey(); // runs getmonkey method to print the monkey } } MonkeyPrint.main(null); . ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-akhil-&gt; 〈 〉 .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-6/2022/09/15/iteration-lab.html",
            "relUrl": "/unit-6/2022/09/15/iteration-lab.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Solar System",
            "content": "",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/09/14/solar-system.html",
            "relUrl": "/2022/09/14/solar-system.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Week 3 Hacks and Requirements | Backend Development",
            "content": "Deployment . Deployed Site: akhilcodingsociety.tk | . Lesson On Conditionals . Link: Lesson on Conditionals | . Focus/Habits/Productive Blogging . About Page and site about myself: LINK | Fastpages running locally: Localhost | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/11/week-3.html",
            "relUrl": "/tickets/2022/09/11/week-3.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Conditionals and Boolean Expressions",
            "content": "Conditionals and Booleans . Conditionals with regards to programming are pieces of code that tell the computer which path to take in running a program | If a certain condition is met, the computer will run a certain section of code | if the condition is not met, the computer will run a different section of code | A conditional statement is a boolean expression, the segment evaluates to either true of false | conditionals can be used within other conditional statements depending on the outcome of code | keeping these expressions simple makes code easy to understand | . If . an &quot;If&quot; statement is the simplest conditional. Usage below. | . public class If{ public static void main(String[] arg){ int num = 20; //create a variable if(num&gt;18){ // check if condition is true of false (Boolean) System.out.println(&quot;num is greater than 18&quot;); // print output if true } } } If.main(null); . num is greater than 18 . Else . an &quot;Else&quot; statement is a conditional that is evaluated if the previous &quot;if&quot; conditional evaluates to false. Usage below. | . public class IfandElse{ public static void main(String[] arg){ int num = 20; //create a variable if(num&gt;30){ // check if condition is true of false (Boolean) System.out.println(&quot;num is greater than 18&quot;); // print output if true } else{ System.out.println(&quot;num is not greater than 18&quot;); // print output when &quot;if&quot; evaluates to false } } } IfandElse.main(null); . num is not greater than 18 . ElseIf . an &quot;ElseIf&quot; conditional is used when more than 2 conditionals are required for a certain task. | And &quot;ElseIf&quot; will evaluate if the previous &quot;if&quot; of &quot;elseif&quot; statement evaluates to false. | can be used many many time in one segment usage below. | . public class ElseIf{ public static void main(String[] arg){ int num = 4; //create a variable if(num == 0){ // check if condition is true of false (Boolean) System.out.println(&quot;num is 00&quot;); // print output if true } else if(num==1){ System.out.println(&quot;num is 1&quot;); // print output when previous conditional evaluates to false } else if(num==2){ System.out.println(&quot;num is 2&quot;);// print output when previous conditional evaluates to false } else if(num==3){ System.out.println(&quot;num is 3&quot;); // print output when previous conditional evaluates to false } else if(num==4){ System.out.println(&quot;num is 4&quot;); // print output when previous conditional evaluates to false } else{ System.out.println(&quot;num is none of the above numbers&quot;); // print output when all previous conditionals are false } } } ElseIf.main(null); . num is 4 . Switch Case . If - Elseif - Else ladder conditionals shown above can be converted to a Case - Switch format usage shown below. | . public class SwitchCase{ public static void main(String[] arg){ int num = 4; //create a variable switch (num) { case 0: // if num is 0 System.out.println(&quot;num is 0&quot;); // print output if true break; case 1: // if num is 1 System.out.println(&quot;num is 1&quot;); // print output if true break; case 2: // if num is 2 System.out.println(&quot;num is 2&quot;); // print output if true break; case 3: // if num is 3 System.out.println(&quot;num is 3&quot;); // print output if true break; case 4: // if num is 0 System.out.println(&quot;num is 4&quot;); // print output if true break; default: System.out.println(&quot;num is none of the options above&quot;); // print output if true break; } } } SwitchCase.main(null); . num is 4 . De Morgan&#39;s Law . Complex conditional statements can be hard to evaluate when looking at &quot;!&quot; or &quot;not&quot; operators, and comparison operators, like &gt;, &lt;, &gt;=, &lt;=, ||, &amp;&amp;, and more | De morgan&#39;s law helps by explaining how operators change when a &quot;!&quot; negation is present | . Conversions: . &lt; becomes &gt;= | becomes &lt;= . | == becomes != | &lt;= becomes &gt; | = becomes &lt; . | != becomes == | . Usage Example Below: . public class DeMorgans{ public static void main(String[] arg){ int x = 2; int y = 3; // Confusing expression, difficult to look at and evaluate outcome if (!(x &gt; 3 &amp;&amp; y &lt; 2)){ System.out.println(&quot;1. Condition is met&quot;); } // converting comparison operators and removing ! using DeMorgan&#39;s Law if (x &lt;= 3 &amp;&amp; y &gt;= 2){ System.out.println(&quot;2. By removing &#39;!&#39; negation and converting using DemMorgans law, this will also be true.&quot;); } } } DeMorgans.main(null); . 1. Condition is met 2. By removing &#39;!&#39; negation and converting using DemMorgans law, this will also be true. .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-3/2022/09/11/conditionals-lesson.html",
            "relUrl": "/unit-3/2022/09/11/conditionals-lesson.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://akhilnandhakumar.github.io/CSA/binary",
            "relUrl": "/binary",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Week 2 Hacks and Requirements | Using Objects",
            "content": "Code.org . Unit 1 Take-aways | . Java Using Objects and PBL design . Build a Console GUI focused on Java Math Class: LINK | Incorporated Binary Visualizer: LINK | Cloned Notes on Objects: LINK | . Extra! . Incorporating Feedback from Week 1: Using Tags Feature to Organize Page | Added Dark Mode | Local Hosting using Docker | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/05/week-2.html",
            "relUrl": "/tickets/2022/09/05/week-2.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Personal Console Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Hello World&quot;); System.out.println(&quot;2 - My GPA Calculator &quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private void calculator() { Scanner input = new Scanner(System.in); String letterGrades = &quot;&quot;; double weight; double sum = 0.00; int num = 1; double classes = 0; System.out.print(&quot;Number of classes you are taking this trimester: n&quot;); classes = input.nextInt(); for (int i = 0; i &lt; classes; i++) { Scanner input2 = new Scanner(System.in); System.out.print(&quot;What is your Grade in Period &quot; + num + &quot;? &gt; &quot;); letterGrades = input2.nextLine(); System.out.print(letterGrades + &quot; n&quot;); if (letterGrades.equals(&quot;A&quot;)){ weight = 4.00; sum += weight; } else if (letterGrades.equals(&quot;B&quot;)){ weight = 3.00; sum += weight; } else if (letterGrades.equals(&quot;C&quot;)){ weight = 2.00; sum += weight; } else if (letterGrades.equals(&quot;D&quot;)){ weight = 1.00; sum += weight; } else if (letterGrades.equals(&quot;F&quot;)){ weight = 0.00; sum += weight; } num = num + 1; } double GPA = sum / classes; System.out.println(&quot;Your Un-weighted GPA is:&quot; + GPA); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World! n&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World! n&quot;); case 2: calculator(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Hello World 2 - My GPA Calculator 0 - Quit - 2: Number of classes you are taking this trimester: What is your Grade in Period 1? &gt; A What is your Grade in Period 2? &gt; B What is your Grade in Period 3? &gt; B What is your Grade in Period 4? &gt; A What is your Grade in Period 5? &gt; C Your Un-weighted GPA is:3.2 0: Goodbye, World! .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-2/2022/08/31/my-menu-console.html",
            "relUrl": "/unit-2/2022/08/31/my-menu-console.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Week 1 Hacks and Requirements | Innovation - Primitives",
            "content": "Canvas Requirements . Scored by Tristan: 2.7+ . code.org requirements met, organized CB learning and did a little bit extra for primitives with a grade calculator | . Productive Blogging . Create a Jupyter Notebook(s) using IJava to capture key learning on Primitives: LINK | Create a Jupyter Notebook using Bash to show that you have all the key tools installed: LINK | Capture information that will grow to 10 college board units: LINK | . Code.org . . Extra! . Created a GPA Calculator for the Primitive Hacks, trying to meet college board and CTE Competencies | Link | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/08/28/week-1.html",
            "relUrl": "/tickets/2022/08/28/week-1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Installation Checks",
            "content": "Python Check . python --version python2 --version python3 --version . Python 2.7.18 Python 2.7.18 Python 3.9.7 . Jupyter and Jupyter Kernel Checks . jupyter kernelspec list . Available kernels: bash /Users/nakulnandhakumar/Library/Jupyter/kernels/bash javascript /Users/nakulnandhakumar/Library/Jupyter/kernels/javascript python2 /Library/Frameworks/Python.framework/Versions/2.7/share/jupyter/kernels/python2 java /usr/local/share/jupyter/kernels/java . Java Check . javac --version java --version . javac 17.0.4.1 java 17.0.4.1 2022-08-18 LTS Java(TM) SE Runtime Environment (build 17.0.4.1+1-LTS-2) Java HotSpot(TM) 64-Bit Server VM (build 17.0.4.1+1-LTS-2, mixed mode, sharing) . Homebrew Check . Anaconda installed through Brew . brew --version brew list . Homebrew 3.5.9 Homebrew/homebrew-core (git revision 8dc01dbd03a; last commit 2022-08-18) Homebrew/homebrew-cask (git revision 8703025552; last commit 2022-08-18) ==&gt; Formulae brotli git libuv pcre2 wget c-ares icu4c mpdecimal python@3.10 xz ca-certificates libidn2 node python@3.9 gdbm libnghttp2 openjdk readline gettext libunistring openssl@1.1 sqlite ==&gt; Casks anaconda .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/25/installation-checks.html",
            "relUrl": "/misc-notebooks/2022/08/25/installation-checks.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Week 0 Hacks and Requirements | Tools & Equipment",
            "content": "Tech Talk 1.0 Hacks . Fastpages . Python Notebook | Java Notebook | . . Insights . Fastpages Insights | Spring Project Insights | . Java Project . . Initial Code Commit | . test .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/08/19/week-0.html",
            "relUrl": "/tickets/2022/08/19/week-0.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello World&quot;) . Hello World .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/18/python-notebook.html",
            "relUrl": "/misc-notebooks/2022/08/18/python-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello world!&quot;); . Hello world! .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/18/java-notebook.html",
            "relUrl": "/misc-notebooks/2022/08/18/java-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Personal Blog",
          "content": "Contents . About | Interests and Achievements | . About Akhil Nandhakumar . . Me and my brother Nakul! | . I am a senior at Del Norte High School, and am taking AP CSA this year. My goals for this class is to fully understand Object Oriented Programing, and become proficient programming in Java. . . Working underneath an autonomous golf cart at a UCSD research internship! | . Outside of this class, my academic goals are to major in Aerospace Engineering and hopefully do computational mechanics for either the automotive industry or aviation. . . Late night tennis in Del Mar with my coach! | . I love playing tennis with my brother Nakul, practicing piano, singing, and learning fun things on my own in my free time, like how to backflip and juggling. I like being outdoors and spending time with my family, and am excited for my future in college and in a career. . Interests, Activities, and Achievements: . www.nandhakumar.net/akhil/ .",
          "url": "https://akhilnandhakumar.github.io/CSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Frontend Test",
          "content": "Name Nationality Rank . .",
          "url": "https://akhilnandhakumar.github.io/CSA/frontend/",
          "relUrl": "/frontend/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "CB Notes",
          "content": "This page will contain content to assist with my learning for College Board topics over the course of CSA this year. Notes on test prep, college board notes, and other resources for each unit will be here. . Table of Contents . Unit 1 | Unit 2 | Unit 3 | Unit 4 | Unit 5 | Unit 6 | Unit 7 | Unit 8 | Unit 9 | Unit 10 | . . Unit 1: Primitive Types . Learn the fundamentals of Java, a programming language, as well as other foundational concepts for coding. . PRIMITIVES LEARNINGS . Return to TOC | . Unit 2: Using Objects . Explore reference data as a way to represent real-world objects in a digital world and discover methods to perform more complex operations. . Return to TOC | . Unit 3: Boolean Expressions and if Statements . Delve into the building blocks of algorithms and focus on using conditional statements to solve problems and control results. . Return to TOC | . Unit 4: Iteration . Learn about iteration, another building block of algorithms that are for repetition. . Return to TOC | . Unit 5: Writing Classes . Explore how real-world interactions can be expressed digitally by organizing behaviors and attributes into classes, and you’ll examine the legal and ethical implications of computer programming. . Return to TOC | . Unit 6: Array . Learn techniques and standard algorithms to work with collections of related data, known as data structures. . Return to TOC | . Unit 7: ArrayList . Delve deeper into data sets, exploring ArrayList objects for larger amounts of data, as well as the privacy concerns related to personal data storage. . Return to TOC | . Unit 8: 2D Array . Branch out into 2D arrays and experiment with data sets represented in a table. . Return to TOC | . Unit 9: Inheritance . Learn how to manipulate programming without altering existing code by using subclasses to create a hierarchy. . Return to TOC | . Unit 10: Recursion . Work on solving larger problems by solving smaller, simpler versions of the same problem using recursive methods. . Return to TOC | .",
          "url": "https://akhilnandhakumar.github.io/CSA/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://akhilnandhakumar.github.io/CSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}