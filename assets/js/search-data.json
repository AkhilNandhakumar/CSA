{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://akhilnandhakumar.github.io/CSA/jupyter/2023/01/30/test.html",
            "relUrl": "/jupyter/2023/01/30/test.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "52 Question MCQ Corrections",
            "content": ". Corrections . Question 4 . I chose D, because I misread newStr as being assigned oldStr.substring(1, 3) + oldStr.substring(3). | It should have been C because oldStr.substring(4) returns the substring of oldStr starting at index 4 and going to the end of oldStr, or &quot;EF&quot;, which results in a final string of having BCEF | . Question 47 . I made a silly mistake and added up all of the array elements without remembering to double the first item in each row, correct answer would be 26, not 21 | . Reflection . I understand all of the concepts for each question, and feel good about taking the MC portion of the AP exam. I only missed 2 questions due to silly mistakes or just going too fast. Similar to the first mc we did, I did much better on 2D array questions. I want to work on working faster and more accurately since I split this up into a few sessions. Within the given time limit on the AP Exam, I should be able to finish on time, but it is a bit close, which is why I want to work on being a bit more efficient when answering the problems. .",
            "url": "https://akhilnandhakumar.github.io/CSA/2023/01/30/mc2-corrections.html",
            "relUrl": "/2023/01/30/mc2-corrections.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "66 Question MCQ Corrections",
            "content": ". Corrections . Question 13 . I was confused on this question, and did not realize that the value of (x || y) could be true if x is false and y is true, but since the value of (x || y) &amp;&amp; x would evaluate to false in this case, the statement are not equivalent to (x||y)&amp;&amp;x | It should be &quot;x&quot;, since (x || y) &amp;&amp; x evaluates to x, since it is independent of y | . Question 30 . The correct answer was E, which was 4, I made a silly mistake and didn&#39;t write down the iterations of the loop. It should have inserted 3 correctly but failed to insert 4. | . Question 36 . Common sense error, I geniunely thought that a rock could move even though it was an inanimate object, out of the 3 other object, which were animals or people :( | . Reflection . I understand all of the concepts for each question, and feel good about taking the MC portion of the AP exam. I only missed 3 questions due to silly mistakes or just going too fast. I also think I should spend a bit more time practicing 2D array questions, since they take me the most time to figure out, and I feel like I might be wasting too much time on those questions. Within the given time limit on the AP Exam, I should be able to finish on time, but it is a bit close, which is why I want to work on being a bit more efficient when answering the problems about 2D arrays, and figuring out which code segments evaluate to the same as the original provided. .",
            "url": "https://akhilnandhakumar.github.io/CSA/2023/01/23/mc-corrections.html",
            "relUrl": "/2023/01/23/mc-corrections.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 9 - Inheritance",
            "content": "SuperClasses and Subclasses with Cars . Let&#39;s first look at the base &quot;Car Class&quot; we talked about, with the generic methods all cars would have. This is called the Super Class. . Some vocab: . protected is an access modifier so that the attribute isn&#39;t affected by outside modifiers. . public class Car { protected String brandName; protected double range; protected double doorNumber; protected double maxSpeed; // Constructor for the attributes present in the superclass public Car(String brandName, double range, double doorNumber, double maxSpeed) { this.brandName = brandName; this.range = range; this.doorNumber = doorNumber; this.maxSpeed = maxSpeed; } public void gas () { System.out.println(&quot;Go!&quot;); } public void brake () { System.out.println(&quot;Stop!&quot;); } public void gearShift () { System.out.println(&quot;Use the stick&quot;); } public void steer () { System.out.println(&quot;turning left...&quot;); } public void horn () { System.out.print(&quot;honking... &quot;); } } . public class TeslaModelS extends Car { // Additional attribute not present in the superclass protected String hornSound; // Constructor for Subclass public TeslaModelS(String brandName, double range, double doorNumber, double maxSpeed, String hornSound) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(brandName, range, doorNumber, maxSpeed); // hornSound is not in the Superclass, so we add it separately in the constructor this.hornSound = hornSound; } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void gearShift () { System.out.println(&quot;Use the gear selector next to the wheel&quot;); } public void steer () { System.out.println(&quot;turning right...&quot;); } // Here, we don&#39;t fully change the functionality of the existing horn method in the superclass // Instead, we take all of the functionality of the superclass method, and then add on to it public void horn () { super.horn(); System.out.println(hornSound); } public static void main(String[] args) { // 5 argument constructor TeslaModelS modelS = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;eugh&quot;); // Example of late binding Car car = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;brrr&quot;); // We can still use the methods from the child class, even though we didn&#39;t mention them in the subclass! modelS.gas(); // Using the overridden method modelS.gearShift(); modelS.steer(); // Using the method we added on to modelS.horn(); car.horn(); } } TeslaModelS.main(null); . Go! Use the gear selector next to the wheel turning right... honking... eugh honking... brrr . Writing Constructors for Subclasses . In the previous example, the TeslaModelS class was a subclass. Recall that a constructor is what initializes the values of the attributes of a class when a new object of the class is created. How do we write constructors for subclasses? . Well, if the attributes of the subclass are exactly the same as the attributes of the superclass, then we can just use the constructor of the superclass. Take a look at the superclass, the Car class. We have defined a constructor within that class already. . To use the constructor of the superclass in our subclass, we need to use some specific syntax. Namely, we need to make use of the super keyword. This allows us to use constructors that we define in the superclass. . Look again at the constructor in the TeslaModelS class. We have passed in 4 attributes to the super constructor, meaning that we are making use of the 4 argument constructor in the superclass. . But our subclass also has an additional attribute: hornSound. We don&#39;t include this in the superclass since this isn&#39;t customizable for most cars. This attribute needs to be included in the constructor for our subclass, but it doesn&#39;t make sense to make a completely new constructor for all 5 attributes when 4 of the attributes are shared with the superclass. . So, what we do is call the superclass constructor with 4 attributes, but then simply add an additional assignment for the 5th, unique, attribute. . Overriding Methods . Overriding allows a subclass or child class to provide a specific implementation of a method that has already been provided by a super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type (or sub-type) as a method in its super-class, then the method in the subclass will override the method in the super-class. . // the existing method in the superclass public void gearShift () { System.out.println(&quot;Use the stick&quot;); } public void steer () { System.out.println(&quot;turning left...&quot;); } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void gearShift () { System.out.println(&quot;Use the gear selector next to the wheel&quot;); } public void steer () { System.out.println(&quot;turning right...&quot;); } . Super Keyword . The two main uses of the super keyword are to use constructors in the superclass and methods in the superclass in a child class. . In this example child class TeslaModelS, the super keyword can be found in the constructor and the method horn. When it says, super(brandName, range, doorNumber, maxSpeed) in the constructor, the super keyword is used to utilize the super class constructor inside the child class. Next, in the horn() method, super.horn() is called. This line utilizes the super keyword to call the method horn() from the parent class Car. . Creating References Using Inheritance Hierarchies . Type Diagram . It is similar to looking at it like a family tree. A is the superclass, or the head of the family. The descendants are the subclasses. . So . public class A public class B extends A public class C extends B . A Reference refers to an object of the class, or the object of an inherited class. So an Inheritance Hierarchy can create references . Polymorphism . public class ToyotaCamry extends Car { public ToyotaCamry (String brandName, double range, double doorNumber, double maxSpeed) { super(brandName, range, doorNumber, maxSpeed); } @Override public void gearShift () { System.out.println(&quot;Manual shift!&quot;); } public void turbo (int a) { System.out.println(&quot;Engaging turbo &quot; + a); } public void turbo (int a, int b) { System.out.println(&quot;Engaging turbo &quot; + a + &quot; and nitro &quot; + b); } public static void main(String[] args) { // 4 superclass argument constructor ToyotaCamry camry = new ToyotaCamry(&quot;Toyota&quot;, 348, 4, 145); // Using the overridden method camry.gearShift(); // Using the overloaded method camry.turbo(1); camry.turbo(1, 1); } } ToyotaCamry.main(null); . Manual shift! Engaging turbo 1 Engaging turbo 1 and nitro 1 . Polymorphism means &quot;many forms&quot;. It means that we do one thing in many ways through inheritance. . For example, the gearShift method defined in the superclass simply says to use the stick. But in manual cars and a Tesla, you need to do different things. So, we show the method to shift gears being used in two different ways in two different classes. We can have two different implementations through overriding methods. . Look at the different outputs for the method in the ToyotaCamry and TeslaModelS class. . This method of polymorphism is called Runtime Polymorphism. It is also called Dynamic Binding or Dynamic Method Dispatch. When you hear any of these things, think of method overriding. . Imagine if you want to do a single method in a single class, but in different ways. For example, in the ToyotaCamry class, we need to either engage a turbo by itself, or a turbo with a nitro. So, we have two methods called turbo. When the method is called, the actual functionality is resolved at compile-time. . When we call camry.turbo(1), then the single argument turbo method is called. When we call camry.turbo(1, 1), the two argument turbo method is called. . Having two methods with the same name but different arguments and functionalities is called method overloading. . This is another form of polymorphism called Compile Time Polymorphism or Static Polymorphism. When you see these terms, think of method overloading. . Early binding has to do with when the compiler decides the method to be called. Relate this to Static Polymorphism or method overloading. Late binding has to do with when the method is decided at runtime. Relate this to Runtime Polymorphism or method overriding. . Object Superclass . Important Things to Know . Object class is the superclass of all other classes in Java | Object is part of the java.lang package (know for imports) | Important Object class methods include: boolean equals(Object x) &amp; String toString() | Object class&#39; subclasses override the equals and toString methods | . toString Method . Prints out the attributes of an object | Converts string object into a string | . equals Method . Compares two strings | Returns a boolean value of true if equal, otherwise returns false | . // Demonstration of toString method // Utilized toString methods in all FRQs so far, here&#39;s an example from FRQ1 public String dayOfWeekToString() { return (&quot;{ &quot;month &quot;: &quot; + this.month + &quot;, &quot; + &quot; &quot;day &quot;: &quot; + this.day + &quot;, &quot; + &quot; &quot;year &quot;: &quot; + this.year + &quot;, &quot; + &quot; &quot;dayOfWeek &quot;: &quot; + this.dayOfWeek + &quot; }&quot;); } public String toString() { return dayOfWeekToString(); } . // Demonstration of equals method // Outputs boolean value of true or false // If one object equals another public class Student { private String name; public Student(String name) { this.name = name; } public static void main(String[] args) { Student student1 = new Student(&quot;Bob&quot;); Student student2 = new Student(&quot;Jeff&quot;); Student student3 = student1; Student student4 = new Student(&quot;A&quot;); Student student5 = student4; System.out.println(student1.equals(student2)); System.out.println(student2.equals(student3)); System.out.println(student1.equals(student3)); System.out.println(student3.equals(student4)); System.out.println(student3.equals(student4)); System.out.println(student5.equals(student4)); } } Student.main(null); . false false true false false true .",
            "url": "https://akhilnandhakumar.github.io/CSA/inheritance/subclass/super/public-private-protected/unit-9/2022/12/14/unit9-notes.html",
            "relUrl": "/inheritance/subclass/super/public-private-protected/unit-9/2022/12/14/unit9-notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 8 - 2D Arrays",
            "content": "2D Arrays . A 2D array is an array of arrays, and a type of multidimensional array. To create a 2D array, you write the type of the class, followed by the name, and the values. . College Board . Unit 8 is worth 7.5-10% of the college board test, so it is not worth a huge amount. However, it is still important to understand how they work and when they can be utilized. . Learning Objectives . 8.1 2D Arrays Represent collections of related primitive or object reference data using two-dimensional (2D) array objects. | . | 8.2 Traversing 2D Arrays For 2D array objects: a. Traverse using nested for loops. | b. Traverse using nested enhanced for loops. | . | . | . Creating A 2D Array . The first step is to initialize the array. To do this, specify the type, followed by &quot;[][]&quot;, followed by the name of the 2D array. Examples: . int[][] numbers; String[][] names; char[][] letters; float[][] floats; double[][] doubles; Object[][] objects; . Initializing a 2D Array . Then you must give it a value, by initializing the 2D array. There are two ways to initialize a 2D array. Method 1: You can initialize the array by giving it values Method 2: You can also initialize it by giving it the size . int[][] numbers1 = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};//method 1: int[][] numbers2 = new int[4][3]; //method 2: Creates array with four rows and 3 columns String[][] names1 = {{&quot;John&quot;,&quot;James&quot;,&quot;Jay&quot;},{&quot;Melissa&quot;,&quot;May&quot;,&quot;Maggie&quot;},{&quot;Bob&quot;,&quot;Burt&quot;,&quot;Billy&quot;}}; //method 1 String[][] names2 = new String[2][2]; //method2: Creates array with 2 rows and 2 columns char[][] letters1 = {{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;},{&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;}}; //method 1 char[][] letters2 = new char[2][3]; //method 2: Creates array with 2 rows and 3 columns . Note, that when you initialize a 2D array using method 1, each row can have a different number of columns, ie, each array within the array can have a different number of values. . Iteration . To iterate through a normal array, you would could use a for loop, as demonstrated below to print the alphabet. You would iterate through the first array(row), then use another for loop nested within the first that iterates through the second arrays(columns). . String[][] alphabet = {{&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;}, {&quot;q&quot;, &quot;w&quot;, &quot;e&quot;, &quot;r&quot;, &quot;t&quot;, &quot;y&quot;, &quot;u&quot;, &quot;i&quot;, &quot;o&quot;, &quot;p&quot;, &quot;[&quot;, &quot;]&quot;, &quot; &quot;}, {&quot;a&quot;, &quot;s&quot;, &quot;d&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;}, {&quot;z&quot;, &quot;x&quot;, &quot;c&quot;, &quot;v&quot;, &quot;b&quot;, &quot;n&quot;, &quot;m&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;}}; for(int i = 0;i&lt;alphabet.length;i++){ for(int j = 0; j &lt; alphabet[i].length;j++){ //nested for loops System.out.print(alphabet[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } . 1 2 3 4 5 6 7 8 9 0 - = q w e r t y u i o p [ ] a s d f g h j k l z x c v b n m , . / . In this way, you can print all the values of a certain 2D array. . Accessing and Changing Elements of 2D Arrays . You can change elements or access elements in 2D arrays by using the indexes. For example, to access the 2nd row, and 3 column, use [1][2] . int[][] numbers = new int[2][2]; //method 2: Creates array with two rows and two columns numbers[0][0] = 1; numbers[0][1] = 4; numbers[1][0] = 9; numbers[1][1] = 16; for(int i = 0;i&lt;numbers.length;i++){ for(int j = 0; j &lt; numbers[i].length;j++){ //nested for loops System.out.print(numbers[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } . 1 4 9 16 . Displaying Contents of Array Vertically and Horizontally . Here, I&#39;ve created a 2D array with 10 rows and 10 columns. Then, I used nested for loops to initialize values for each value in each row and column to the product of the row and column numbers. . int[][]products = new int [10][10]; //creating 2D Array for(int i = 0;i&lt;products.length;i++){ for(int j = 0; j &lt; products[i].length;j++){ products[i][j] = i*j; //initializing values for array } } System.out.println(&quot;Printing out values in a pattern/grid design: n&quot;); for(int i = 0;i&lt;products.length;i++){ for(int j = 0; j &lt; products[i].length;j++){ System.out.print(products[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } System.out.println(&quot; nPrinting out values horizontally: n&quot;); for(int i = 0;i&lt;products.length;i++){ for(int j = 0; j &lt; products[i].length;j++){ System.out.print(products[i][j]+&quot; &quot;); } } System.out.println(&quot; n nPrinting out values vertically: n&quot;); for(int i = 0;i&lt;products.length;i++){ for(int j = 0; j &lt; products[i].length;j++){ System.out.println(products[i][j]+&quot; &quot;); } } . Displaying Backwards and Upside Down . Here, I&#39;ve created a 2D array with 10 rows and 10 columns. Then, I used nested for loops to initialize values for each value in each row and column to the sum of the row and column numbers. . int[][]sums = new int [10][10]; //creating 2D Array for(int i = 0;i&lt;sums.length;i++){ for(int j = 0; j &lt; sums[i].length;j++){ sums[i][j] = i+j; //initializing values for array } } System.out.println(&quot;Printing out values forward&quot;); for(int i = 0;i&lt;products.length;i++){ for(int j = 0; j &lt; products[i].length;j++){ System.out.print(products[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } System.out.println(&quot; n nPrinting out values backward&quot;); for(int i = products.length-1;i&gt;=0;i--){ for(int j = products[i].length-1; j &gt;= 0;j--){ System.out.print(products[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } . Printing out values forward 0 0 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 0 2 4 6 8 10 12 14 16 18 0 3 6 9 12 15 18 21 24 27 0 4 8 12 16 20 24 28 32 36 0 5 10 15 20 25 30 35 40 45 0 6 12 18 24 30 36 42 48 54 0 7 14 21 28 35 42 49 56 63 0 8 16 24 32 40 48 56 64 72 0 9 18 27 36 45 54 63 72 81 Printing out values backward 81 72 63 54 45 36 27 18 9 0 72 64 56 48 40 32 24 16 8 0 63 56 49 42 35 28 21 14 7 0 54 48 42 36 30 24 18 12 6 0 45 40 35 30 25 20 15 10 5 0 36 32 28 24 20 16 12 8 4 0 27 24 21 18 15 12 9 6 3 0 18 16 14 12 10 8 6 4 2 0 9 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 . int[][]sums = new int [10][10]; //creating 2D Array for(int i = 0;i&lt;sums.length;i++){ for(int j = 0; j &lt; sums[i].length;j++){ sums[i][j] = i+j; //initializing values for array } } System.out.println(&quot;Rows forward, columns backward&quot;); for(int i = 0;i&lt;products.length;i++){ for(int j = products[i].length-1; j &gt;= 0;j--){ System.out.print(products[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } System.out.println(&quot; n nRows backward, columns forward&quot;); for(int i = products.length-1;i&gt;=0;i--){ for(int j = 0; j &lt;products[i].length;j++){ System.out.print(products[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } . Rows forward, columns backward 0 0 0 0 0 0 0 0 0 0 9 8 7 6 5 4 3 2 1 0 18 16 14 12 10 8 6 4 2 0 27 24 21 18 15 12 9 6 3 0 36 32 28 24 20 16 12 8 4 0 45 40 35 30 25 20 15 10 5 0 54 48 42 36 30 24 18 12 6 0 63 56 49 42 35 28 21 14 7 0 72 64 56 48 40 32 24 16 8 0 81 72 63 54 45 36 27 18 9 0 Rows backward, columns forward 0 9 18 27 36 45 54 63 72 81 0 8 16 24 32 40 48 56 64 72 0 7 14 21 28 35 42 49 56 63 0 6 12 18 24 30 36 42 48 54 0 5 10 15 20 25 30 35 40 45 0 4 8 12 16 20 24 28 32 36 0 3 6 9 12 15 18 21 24 27 0 2 4 6 8 10 12 14 16 18 0 1 2 3 4 5 6 7 8 9 0 0 0 0 0 0 0 0 0 0 .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-8/2d%20arrays/iteration/for%20loop/nested%20loops/2022/12/14/unit8-notes.html",
            "relUrl": "/unit-8/2d%20arrays/iteration/for%20loop/nested%20loops/2022/12/14/unit8-notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 7 - ArrayList",
            "content": "7.1 Introduction to ArrayList . Arrays ArrayLists . Static (fixed size) | Dynamic (can change size) | . Fundamental java feature | Part of a framework. Someone was nice and designed this with the behind the scenes being arrays | . An object with no methods | A class with many methods | . Not as flexible | Designed to be more flexible | . Can store more primitive data | Not designed to store primitives, they store object references | . | Slightly slower than Arrays | . | Can only be used with an import statement | . Real Life Array Example: You always have to have five players on the court . Real Life ArrayList Example: In dodgeball, the number of people in the game is changing based on who comes in or gets out . Primitive Data Types: . boolean | char | double | int | . Wrapper Class Data Types (Store the primitive values as objects) . Boolean | Character | Double | Integer | . import java.util.ArrayList; //you must import the java.util package // Instantiating: ArrayList&lt;DataType&gt; variableName = new ArrayList&lt;&gt;(n); //DataType must be nonprimitive data type public class introArrayList { public static void main (String[] args) { ArrayList&lt;Integer&gt; e1 = new ArrayList&lt;Integer&gt;(); //empty ArrayList&lt;String&gt; e2 = new ArrayList&lt;String&gt;(5); //5 elements ArrayList&lt;Dogs&gt; e3 = new ArrayList&lt;Dogs&gt;(); //you can store whatever objects you want } } . 7.2 ArrayList Methods . There are a lot of cool methods that you can use with arrayLists, but here are the ones College Board wants you to know for 7.2: . size(); . Returns the number of elements in the list | . add(obj); . Adds element at the end | . add(index, object); . Adds element at specific index | . remove(index); . Removes element from specific index | . set(index, object); . Replaces element at index with new object | . get(index); . Returns element at index | . import java.util.ArrayList; public class methodsArrayList { public static void main (String[] args) { ArrayList&lt;String&gt; dogs = new ArrayList&lt;String&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); ArrayList&lt;String&gt; dogs2 = new ArrayList&lt;&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); System.out.println(&quot;There are &quot; + dogs.size() + &quot; in the ArrayList&quot;); System.out.println(&quot;There are &quot; + dogs2.size() + &quot; in the ArrayList&quot;); //objects you add must be of the same data type dogs.add(&quot;Peanut&quot;); System.out.println(&quot;There are now &quot; + dogs.size() + &quot; dogs in the ArrayList&quot;); String myDog = dogs.get(2); System.out.println(&quot;My dog is named &quot; + myDog); } } //Note: you don&#39;t need to declare &lt;String&gt; again after new ArrayList methodsArrayList.main(null); . There are 3 in the ArrayList There are 3 in the ArrayList There are now 4 dogs in the ArrayList My dog is named Noodle . //Hmmmm... seems suspect import java.util.ArrayList; public class example { public static void main (String[] args) { ArrayList&lt;Boolean&gt; questions = new ArrayList&lt;&gt;(); questions.add(true); questions.add(false); myMethod(questions); } public static void myMethod(ArrayList arr) { if (arr.size()&gt;0) { arr.set(0,&quot;Hello&quot;); //String with boolean??? Uh oh! System.out.println(arr.get(0)); } } } example.main(null); . Hello . //Returning an ArrayList public static ArrayList methodName (ArrayList arr){ return arr; } . 7.3 Traversing ArrayLists . there are 2 ways to traverse arraylists: for loops and enhanced for loops | use get() instead of bracket notation for getting an element of an arraylist | use size() to find number of elements in arraylist instead of using .length | . for loop . import java.util.*; public class main { public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5); for (int i = 0; i &lt; numbers.size(); i++) { System.out.print(numbers.get(i) + &quot; &quot;); } } } main.main(null); . 1 2 3 4 5 . enhance for loops . import java.util.*; public class main { public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5); for ( int num : numbers ) System.out.print(num + &quot; &quot;); } } main.main(null); . 1 2 3 4 5 . Common Mistakes . don&#39;t forget to import java.util.ArrayList | don&#39;t declare or instantiate ArrayList with a primitive data type, which are things such as int, double, and booleans. | don&#39;t forget the parentheses at the end of the constructor and the element types with the brackets: ArrayList list = new ArrayList(); &lt;/li&gt; don&#39;t confuse arrays with arraylists, don&#39;t use [], don&#39;t use .length use .size() instead | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 7.4 Developing Algorithms Using ArrayLists . Modify Array Values . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); for (int i = 0; i &lt; num.size(); i++) { num.set(i, num.get(i) * 2); } System.out.print(num); . [10, 2, 6] . find max value . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int maxValue = num.get(0); for (int number: num) { if (number &gt; maxValue) { maxValue = number; } } System.out.print(maxValue); . 5 . find min value . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int minValue = num.get(0); for (int number: num) { if (number &lt; minValue) { //if new min value found, replace current minValue minValue = number; } } System.out.print(minValue); . 1 . 7.5 Searching . Often times we need to locate data inside linear structures. Normally we would use for loops in order to specify each element, one at a time, and do not need to track the index after execution. | . for ( int index = 0; index &lt; items.size(); index++ ){ //forward searching if ( items.get(index) == num ){ return index; } } . Important Things to Keep in Mind . When looking at int values, the == operator should be used. | When searching for a double value, we need to make sure the value is close enough by doing some math. | Object instances should always use the .equals(otherThing) method to check for a match. | . When searching a linear structure we need to send it the structure and what we are looking for as parameters. A standard for loop with an if block is all we need to search any linear structure. . public int whereIsMyNumber(int magicNumber, int [] myNumbers) { for (int index = 0; index &lt; myNumbers.length; index++) //search through every single spot { if (myNumbers[index] == magicNumber) //do they match? if so return index { return index; } } return -1; // if searched through every single spot, indicate its not there } . You shouldn&#39;t use the == operator when looking for an object. It will only return true if the variable and the element stored at the index point to the same memory, are aliases of each other. | . Here is an example of how you would search for a traditional object: . public int findTheWord(String searchedPhrase, ArrayList&lt;Book&gt; myBooks) { for (int index = 0; index &lt; myBooks.size(); index++) //search through every book in structure { Book currentBook = myBooks.get(index); //hold current book with current book variable String currentPhrase = currentBook.getDescription(); //get description of current book and store in variable currentPhrase if (currentPhrase.equals(searchedPhrase)) //if parameter = current phrase of book looking at - using .equals instead of == operator { return index; } } return -1; //if no match found, indicate its not there } . 7.6 Sorting . Selection sort identifies either the maximum or minimum of the compared values and iterates over the structure checking if the item stored at the index matches the condition, if so, it will swap the value stored at the index and continue. | The insertion sort is characterized by building a sorted structure as it proceeds. It inserts each value it finds at the appropriate location in the data structure. This is often accomplished by using a while loop as the inner loop. | . for (int outer = 1; outer &lt; randomList.size(); outer++) { DebugDuck tested = randomList.get(outer); //extract out a value out of list, passes to outer int inner = outer - 1; //goes back and compares to previous while ( inner &gt;= 0 &amp;&amp; tested.compareTo(randomList.get(inner)) &lt; 0 ) //checks to see if index is valid { randomList.set(inner + 1, randomList.get(inner)); //move up by one and replace original location inner--; } randomList.set(inner + 1, tested); //anything taken out would be placed back into structure } . 7.7 Ethical Issues Around Data Collection . Safety with Data Collection . It is very important to minimize user data collection in our programs. While collecting data in a smaller program may not be a big issue, establishing good practices with data security is always a safer bet when eventually moving to larger projects that manage data. . Whenever you come across data that you no longer will need, it is a good practice to explicitly remove that data altogether. . import java.util.Scanner; import java.util.Arrays; public class dataRemoval { public static void main(String[] args) { // just a scanner object Scanner sc = new Scanner(System.in); // makes an arraylist with some users already in it ArrayList&lt;String&gt; userList = new ArrayList&lt;&gt;(Arrays.asList(&quot;Kian&quot;, &quot;Kiannp44@gmail.com&quot;, &quot;Samuel&quot;, &quot;samuelwaang@gmail.com&quot;, &quot;Calissa&quot;, &quot;calissaT@gmail.com&quot;)); // takes user&#39;s name System.out.println(&quot;Log in &quot;); System.out.println(&quot;Please enter your name:&quot;); String name = sc.nextLine(); System.out.println(name); userList.add(name); // takes user&#39;s email System.out.println(&quot;Please enter your email:&quot;); String email = sc.nextLine(); System.out.println(email); userList.add(email); // prints all the current users in arraylist System.out.println(); System.out.println(&quot;Current users in databse &quot;); System.out.println(userList); // prompt to log out System.out.println(); System.out.println(&quot;Would you like to log out? (y/n)&quot;); String logOut = sc.nextLine(); if (logOut.equals(&quot;y&quot;)) { // if user logs out, remove their name and email from arraylist System.out.println(logOut); userList.remove(name); userList.remove(email); } // reprints current users in arraylist System.out.println(); System.out.println(&quot;Current users in database &quot;); System.out.println(userList); } } dataRemoval.main(null); . Log in Please enter your name: Evan Please enter your email: evanjoelsanchez@gmail.com Current users in databse [Kian, Kiannp44@gmail.com, Samuel, samuelwaang@gmail.com, Calissa, calissaT@gmail.com, Evan, evanjoelsanchez@gmail.com] Would you like to log out? (y/n) y Current users in database [Kian, Kiannp44@gmail.com, Samuel, samuelwaang@gmail.com, Calissa, calissaT@gmail.com] . Anonymizing Personal Data . Instead of using names for users, we can use hash codes instead, which means that each user will simply be identified by their hash code. . public class hashUsers { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String name = sc.nextLine(); // this .hashCode() method will convert the name to a code which cannot be traced back to that original name int id = name.hashCode(); name = null; // name is now null, and nobody will ever know the original name I put in System.out.println(&quot;Hash Code: &quot; + id); } } hashUsers.main(null); . Hash Code: 2172094 . &lt;/div&gt; | .",
            "url": "https://akhilnandhakumar.github.io/CSA/arraylist/unit-7/enhanced%20for%20loop%20(for%20each)/2022/12/14/unit7-notes.html",
            "relUrl": "/arraylist/unit-7/enhanced%20for%20loop%20(for%20each)/2022/12/14/unit7-notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 6 - Arrays",
            "content": "Arrays Overview . Arrays are 10-15% of the AP CSA Exam | The four main topics that College Board wants you to know Array creation and access | Traversing arrays | Enhanced for loops for arrays | Developing algorithms using arrays | . | The overall purpose of arrays is to store multiple values in a single variable, instead of declaring separate variables for each value. | . 6.1 Array Creation and Access . Arrays are used to store one data type | Unlike Arraylists, arrays have a fixed size and cannot be changed | Arrays can be denoted using braces {} Below is an example of a simple array storing our scrum team names [Meena, Shraddha, Madhumita, Pranavi] . | To use an array you have to use the command import java.util.Arrays; . | . Making Arrays . There are two ways to make arrays . using constructors | using pre-intiliazed arrays | . dataType[] arrayName = new dataType[numberOfItems]; //Constructor int[] arraySample = {1,3,5,7,9}; //pre-initialized arrays . Accessing Elements in Arrays . You can access the elements in an array using different commands | . arrayName.Length //determine the size arrayName.length - 1 //to access the last item in the array . 6.2 Traversing Arrays . Traversing is accessing every value in the array | Can be done using a loop like a for loop or while loop | Below is an example - using a for loop, we can iterate through each fruit in the array of Strings and print it out | . // Here is the array we will be working with String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; for (int i = 0; i &lt; myFruits.length; i++) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . Can also loop through an array in reverse | . for (int i = myFruits.length - 1; i &gt;= 0 ; i--) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . If we have a list of numbers, we could change each value in the array by a certain amount | . // Here is the array we will be working with int[] myNumbers = new int[] {1, 3, 5, 7, 9}; for (int i = 0; i &lt; myNumbers.length; i++) { // add 10 to each element in the array myNumbers[i] += 10; System.out.println(&quot;New element &quot; + i + &quot; is &quot; + myNumbers[i]); } . We can also traverse an array using a while loop | . // Here is the array we will be working with String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; int i = 0; while (i &lt; myFruits.length) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); i++; } . Bound Errors . ArrayIndexOutOfBoundsException thrown, can happen when using loops to access array elements | In the example below instead of the condition being while the index is less than the length of the array, the condition is less than or equal too | This mean the loop will try to run when i = 4 (since the length of the list is 4). However since array index starts from 0, the last item in the array will have an index of 3. So, index of 4 will be out of bounds, resulting in the error. | . int i = 0; while (i &lt;= myFruits.length) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); i++; } . 6.3 Enhanced for loop for Arrays . This topic was pretty short, but essentially what you need to know is about the enhanced for loop. The enhanced for loop can be used to traverse through most data structures (i.g. arrays). However, it can only traverse in a forward direction. Usually the structure is like so . for (dataType i: arrayName) { do something with i } . Essentially, this code mentions how every element in the array (i) has to have something done to it. It&#39;s important to note that although there is access to the element i, but it isn&#39;t possible to change the value/set new values to element i. . We can use mutator methods on objects on the array to set the value of their instance variables. This is because i is a copy of the object reference, which means that i refers to the same object as the array element, so calling methods on i is the same as calling methods on the individual array elements themselves. For example . public class Student { private String name; /** Sets the name of the Student */ public void setName(String name) { this.name = name; } /** Other instance variables, methods, and constructors not shown */ } // IN ANOTHER CLASS /** Resets all students&#39; names */ public static void doubleArray(Student[] array, String defaultName) { for (Student student: array) { student.setName(defaultName); // Sets each student&#39;s name to a default name } } . 6.4 Developing Algorithms using Arrays . Here are some algorithms that arrays can be used for (from college board standards), . Minimum and Maximum of a list of elements | Compute the sum, average, or mode of multiple elements | Determine if at least one element has a property | Access consecutive pairs of elements | Determine duplicates | . What to use when problem solving with arrays .length can be used to find the length of an array . The value at a specific index can be found with array[i], where i is the index | An element at index i can be replaced using array[i] = new element | You can iterate over an array with a for loop for(type element: array) { code here . | . Computing Sums with Arrays . See the code below for a sample algorithm of how to compute the sum of elements in an array. This could be applied to finding the mean, standard deviation, or any other algorithm that requires summation. . int[] array = {5, 1, 78}; // intialize int sum = 0; // variable to keep track of sum for (int number : array) { // iterates over each loop in the array sum += number; // the number is added to the sum } System.out.println(sum); //expected sum is 84, so 84 should be printed . 84 .",
            "url": "https://akhilnandhakumar.github.io/CSA/arrays/unit-6/2022/12/14/unit6-notes.html",
            "relUrl": "/arrays/unit-6/2022/12/14/unit6-notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 10 - Recursion",
            "content": "This is what a recursion looks like where the example method is called within itself. . public static void example(int n) { if (n &gt; 0) example (n-1); } . In this example, the simplerRecur method is called within itself. So, simplerRecur(4) will result in printing 4 and then one less than it until the parameter is false. It then cycles back up to the top of the call stack. This is why it returns the 2 3 4 at the end. . public static void simplerRecur(int n) { System.out.println(n); if (n &gt; 2) simplerRecur(n-1); System.out.println(n); } simplerRecur(4); . 4 3 2 2 3 4 . In this, simpleRecur2(8) wil return 8 + simpleRecur2(4) and simpleRecur2(4) will return 4 + simpleRecur2(2). This process will continue until n = 0 and all the values will be added together. . 8 + 4 + 2 + 1 + 0 . public static int simpleRecur2(int n) { if (n == 0) return 0; return n + simpleRecur2(n/2); } simpleRecur2(8); . 15 . This one is similar to the last example where it will add the values together but this has multiple recursive methods inside it. So, dblRecur(5) will return 5 + dblRecur(2) + dblRecur(1) and then dblRecur(2) and dblRecur(1) will have their own run through the method until n is no longer greater than 0. . public int dblRecur(int n) { if (n &gt; 0) return n + dblRecur(n/2) + dblRecur(n/3); return 0; } dblRecur(5); . 9 . Recursion can also be seen will String objects. In this, mystery(&quot;computer&quot;) will first go through the mystery(s.substring(2)) which will result in a call stack with &quot;computer&quot;, &quot;mputer&quot;, &quot;uter&quot;, &quot;er&quot;, and &quot; &quot;. THe print statement will then print the first letter of those Strings so e u m c. . public static void mystery (String s) { if (s.length() &gt; 1) { mystery(s.substring(2)); System.out.print(s.substring(0,1)); } } mystery(&quot;computer&quot;); . eumc . 10.2 Binary Search With Equations . We start by taking the entire array, starting with the first and the last numbers, and find the midpoint. Starting number is 0, and end is 40, and the midpoint is 20. . Since 24 is greater than 20, we take the upper bound of the list, ignoring everything less that 22.The first number now becomes 22. . We identify the midpoint again, which is 30. Since the new midpoint is higher than 24, we now take the lower bound. Here, the last number becomes 28. . In this new bound, we find the midpoint again, which happens to be 24. So, we have found our target. . Now, lets say that the target was 23, instead of 24. The program would have to keep going from the midpoint of 24. Since 23 is less than 24, it takes the lower bound. However, this makes first, last and midpoint numbers 22. . Again, since 22 is less than 23, the first number becomes 24, and the last number stays 22. This becomes a problem since the first number is greater than the last, which is our base case. This tells the program that the number 23 isn’t in the list, and that it should end. . public class recursion{ public static int recursionBinarySearch(int[] array, int first, int last, int target){ int midpoint; //if the first number is greater than the last, the target number is not in the list if (first &gt; last){ System.out.println(-1); return -1; } else{ midpoint = (first+last)/2; //take the upper bound if number is greater than midpoint if (array[midpoint] &lt; target){ return recursionBinarySearch(array, midpoint+1, last, target); } // take the lower bound if the number is lesser than midpoint if (array[midpoint] &gt; target){ return recursionBinarySearch(array, first,midpoint-1, target); } System.out.println(&quot;index of target: &quot; + midpoint); return midpoint; } } public static void main(String[] args){ // test array in main int[] test_array = new int[]{ 0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40 }; recursion.recursionBinarySearch(test_array, 0, test_array.length, 24); } } recursion.main(null); . index of target: 12 . Merge Sort . Merge Sort can be used to sort ArrayLists . | Uses a Divide and Conquer algorithm to Sort ArrayList . Divides the array into halves, and then calls itself for the two different halves in order to sort them | merges the two sorted halves into one lists | . | Merging Values into One Sorted Array . copy the original elements into a temporary array | work from left to right in each virtual array to compare element and return them to the correct order in the original array | . | . Way to Think About It: mergeSort (myList) { mergeSort(left); mergeSort(right); mergeSort (left &amp; right) } . First, the mergeSort function splits the ArrayList into half, and then takes the left side of the list. It then calls mergeSort again and then halves the list, and does this two more times. Eventually, it is left with just 5 after sorting using all of mergeSort(left). . Then, it goes back to the third step with just the 5 and 25, and looks at the right side of that one section. It compares the two halves, 5 and 25, and then sorts it, keeping the 5 before the 25 and recurses its way back to the ArrayList in the beginning. . We then go back down one more half where we have the 5, 25, 8, and -9. Because we had already sorted the left side of that list, we then go to the right side with the 8 and -9. We then sort the left side where we get 8 and then the right side with -9. . After this, the mergeSort() sorts -9 and 8 into the right order, and then recurses it once again 8 and -9 with the sorted -9 and 8 instead. . Because the four of the numbers for the left side of the original list were not in the correct order overall, mergeSort is once again called and the list is sorted with the correct order for just the left side, now containing -9, 5, 8, 25. . This process is then repeated, but for the right half of the ArrayList. It keeps slitting the list in half, sorting it, and then bringing it to the level below, where eventually, the ArrayList is sorted and merged together, as shown in the image below. . Recursion Trees . Recursion trees are a method for visualizing each recursive case (everytime the method is called) until the base case is reached. . Recursive blocks call themselves. In order for them to finish, there must be some special case in which they don&#39;t call themselves. That is the base case, a simpler version of the block&#39;s script that doesn&#39;t call the block itself. . There is usually a conditional with two cases: a base case for the lowest level that stops the recursion from going on forever and a recursive case that calls the block itself at lower levels until it reaches the base case. . Note: If a block keeps recursively calling itself forever, the program is stuck in an infinite loop meaning that there isn&#39;t a base case or it is not accessible. . public class example{ static int foo(int n) { if (n &lt; 0){ return 1; } else{ return foo(n-2) + foo(n-1); } } public static void main(String args[]){ System.out.println(foo(3)); } } example.main(null); . 8 .",
            "url": "https://akhilnandhakumar.github.io/CSA/recursion/iteration/unit-10/binary%20search/2022/12/14/unit10-notes.html",
            "relUrl": "/recursion/iteration/unit-10/binary%20search/2022/12/14/unit10-notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Technical Panel Reflection",
            "content": "Notes Taken During Talk . Kathyleen Beveridge: . Info about her: . Born in Vietnam | Came to California in 1980 | Finance degree from Santa Clara University | Started off as a stock broker working for Wells Fargo - didn’t enjoy her life | Felt like working in investing had more of a “one to one” impact, less of a “one to many” impact | Switched her path to work at tech companies, originally at HP, and then Qualcomm, now at ThermoFisher Scientific | Works closely with engineering/R&amp;D department to determine if new products fit into a certain market | Mainly works at companies that use cs to serve the world | With cs people can make macro-impacts on the world | Thermo fisher is a biotech company that blends science and cs . . | . | Agile Methodology: . Always working in short “Sprints” | Being familiar with agile is highly regarded in the workforce | . | . . Kris Porter . Info about him: | Software Engineer . Went to UCLA for electrical engineering | Masters in electrical engineering from Cal State Long Beach | Finished grad school when the stock market crashed, couldn&#39;t find jobs | Found a job at a startup doing DevOps work | Moved to NBC setting up streaming infrastructure for the Olympics | Worked for Qualcomm for 6 years | Latest position working for Twitter | Going into high tech involved continuous learning which is very important | . | Agile Methodology: . Different companies have their own version of Agile | Interacted together with 150 engineers in large meetings | Created roadmaps for all projects no matter the size | Helped build teamwork and coordinate everything | . | Machine Learning: . Develop algorithms to try and predict trends and consumer trends | This can save the company money | . | General Tips: . Most Important Skill in tech industry: continuous improvement and learning of new knowledge. | Don&#39;t be super concerned about the things that you read on the news | The best people are people that listen and translate it to technology that can solve your requirements | Learning how to code is a way of thinking, thinking about it critically, and you can apply it to all your real word skills and experiences | . | . Reflection . As a someone looking forward to working in a STEM job, the information I learned from the speakers will be is extremely useful and applicable to me. Both Mr. Porter and Ms. Berveridge spoke on the agile methodology which is something that we have been learning about in class through implementation. They explained that being familiar with agile is highly regarded in the high-tech workforce, and hearing that from them highlighted the importance of using it in CSA class. They explained that the collaboration and teamwork skills we have been using were very effective in their jobs, helping them coordinate projects of all sizes. . In addition to that specific skills, Mr. Porter explained that benefits of being knowledgeable in computer science for use in any field or area. For me personally, learning how to code can be a valuable skill in a career in mechanical engineering or aerospace engineering. It is a way of thinking critically and applying those skills to real-world problems. Even though it may not be specifically computer science related, mechanical and aerospace engineering incorporate a large amount of programming, like developing algorithms and simulations to improve the design and performance of specific parts or computers. This illustrates how learning computer science now would definitely help me pursue a career in this field. .",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/12/13/extra.html",
            "relUrl": "/2022/12/13/extra.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 9 Homework",
            "content": "Homework: . public class WorldCup { public String team1; public String team2; public String color; public WorldCup (String team1, String team2, String color){ this.team1 = team1; this.team2 = team2; this.color = color; } public String getTeam1(){ return team1; } public String getTeam2(){ return team2; } public void main(String[] args) { System.out.println(&quot;Team 1: &quot; + this.team1); System.out.println(&quot;Team 2: &quot; + this.team2); System.out.println(&quot;Team Colors: &quot; + this.color); } } public class Argentina extends WorldCup { public Argentina(String team1, String team2, String color){ super(team1, team2, color); } } public class Portugal extends WorldCup { public Portugal(String team1, String team2, String color){ super(team1, team2, color); } } Argentina arg = new Argentina(&quot;Argentina&quot;, &quot;Null&quot;, &quot;Blue and White&quot;); Portugal por = new Portugal(&quot;Portugal&quot;, &quot;Null&quot;, &quot;Green and Red&quot;); arg.main(null); por.main(null); . Team 1: Argentina Team 2: Null Team Colors: Blue and White Team 1: Portugal Team 2: Null Team Colors: Green and Red . Inheritance (To do) . Add a getAge method in the Person super class | Create a new subclass Student with additional members of your choice to personalize the Student class | Create a new subclass Teacher with additional members of your choice | Override the toString method using the @Override to print a Student and teacher object with new members | Print the student and teacher. | . import java.util.Date; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.time.Period; import java.time.ZoneId; public class Person { public String name; public String birthday; public Person (String name, String birthday){ this.name = name; this.birthday = birthday; } public String getName(){ return name; } public int getAge(){ //LocalDate birthDay = this.birthday.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(); //return Period.between(birthDay, LocalDate.now()).getYears(); return -1; } } public class Student extends Person { private int grade; private double gpa; public Student (String name, String birthday, int grade, double gpa) { super(name, birthday); this.grade = grade; this.gpa = gpa; } public int getGrade(){ return grade; } @Override public String toString(){ return &quot;Student to String: &quot; + name + &quot;, &quot; + birthday + &quot;, gpa: &quot; + gpa ; } } public class Teacher extends Person { private String subject; public Teacher (String name, String birthday){ super(name, birthday); } @Override public String toString(){ return &quot;Teacher to String: &quot; + name + &quot;, &quot; + birthday; } } public class Main{ public static void main(String[] args){ Student akhil = new Student(&quot;Akhil&quot;, &quot;11/01/2004&quot;, 12, 4.0); System.out.println(akhil.toString()); Teacher mortensen = new Teacher(&quot;Mr. Mort&quot;, &quot;01/01/1920&quot;); System.out.println(mortensen.toString()); } } Main.main(null); . Student to String: Akhil, 11/01/2004, gpa: 4.0 Teacher to String: Mr. Mort, 01/01/1920 .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-9/classes/super/inheritance/2022/12/13/cb9-hw.html",
            "relUrl": "/unit-9/classes/super/inheritance/2022/12/13/cb9-hw.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 8 Homework",
            "content": "Homework . Create a class for 2D array learning. | Create a method too initialize a 2D array with arbitrary values | Create a method to reverse the 2D array and print out the values | Create a method that asks for the input of a position and it returns the corresponding value | Create a method that multiplies each value in a row and then adds all the products together | Create a new object to test out each method in the main function | . public class Homework{ // Create a class for 2D array learning. private int[][] numbers; private int [][] reverse; // reversed 2D array public Homework(){ numbers = new int[5][5]; reverse = new int[5][5]; // Initialize a 2D array with arbitrary values } public void init(){ // Initialize a 2D array and set arbitrary values for(int i = 0; i &lt; numbers.length; i++){ for(int j = 0; j &lt; numbers[i].length; j++){ numbers[i][j] = (int) (Math.random() * (100 - 1)) + 1; } } } public void print(int[][] temp){ for(int i = 0; i &lt; temp.length; i++){ for(int j = 0; j &lt; temp[i].length; j++){ System.out.print(temp[i][j] + &quot; &quot;); } System.out.println(); } } public void reverse(){ // Create a method to reverse the 2D array and print out the values for(int i = 0; i &lt; numbers.length; i++){ for(int j = 0; j &lt; numbers[i].length; j++){ reverse[numbers.length-1-i][numbers[i].length-1-j] = numbers[i][j]; } } } public String inputIndex(){ // Create a method that asks for the input of a position and it returns the corresponding value Scanner sc = new Scanner(System.in); System.out.println(&quot;Row 1 - 5: &quot;); int num1 = sc.nextInt()-1; System.out.println(&quot;Column 1 - 5: &quot;); int num2 = sc.nextInt()-1; return (&quot;Value:&quot; + numbers[num1][num2]); } public void productSum(){ // Create a method that multiplies each value in a row and then adds all the products together int n = 1; int sum = 0; for(int i = 0; i &lt; numbers.length; i++){ for(int j = 0; j &lt; numbers[i].length; j++){ n *= numbers[i][j]; } sum += n; n = 1; } System.out.println(&quot;Product Sum: &quot; + sum); } public static void main(String[] args) { // Create a new object to test out each method in the main function Homework objArray = new Homework(); objArray.init(); System.out.println(&quot;Original Array&quot;); objArray.print(objArray.numbers); System.out.println(&quot; &quot;); objArray.reverse(); System.out.println(&quot;Reversed Array&quot;); objArray.print(objArray.reverse); System.out.println(); System.out.println(objArray.inputIndex()); System.out.println(); objArray.productSum(); } } Homework.main(null); . Original Array 55 47 29 97 13 37 97 20 41 97 61 55 37 96 72 25 63 80 65 34 25 42 51 62 50 Reversed Array 50 62 51 42 25 34 65 80 63 25 72 96 37 55 61 97 41 20 97 37 13 97 29 47 55 Row 1 - 5: Column 1 - 5: Value:50 Product Sum: 1682486045 . Extra . class MonkeyLoop { String [][] monkeys; //hint: missing code String [][] cthulhus; public MonkeyLoop() { monkeys = new String[][]{ { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes }, { &quot; _⏄_/ &quot;, //[1][0] chin }, { &quot; --0-- &quot;, //[2][0] body }, { &quot; ⎛ ⎞ &quot; //[3][0] legs }, }; cthulhus = new String[][]{ { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _⏄_/ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀⠀ --0-- &quot;, &quot;⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀⠀⠀ ⎛ ⎞ &quot;, &quot;⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;A story of a Monkey and Cthulhus&quot;); int monkeyCount = monkeys.length; for (int i = 0; i &lt; monkeyCount; i++) { //hint: missing code System.out.println(monkeys[i][0]); // 2D array monkeys is 1 column with multiple rows } //hint: missing code, another for loop for(int j = 0; j &lt; cthulhus[0].length; j++){ System.out.println(cthulhus[0][j]); // 2D array cthulhus is 1 row with multiple columns } System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . A story of a Monkey and Cthulhus ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ʕง ͠° ͟ل͜ ͡°)ʔ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _⏄_/ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀⠀ --0-- ⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀⠀⠀ ⎛ ⎞ ⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ 0000000000000000000000000000000000 THE END .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-8/2d%20arrays/2022/12/09/cb8-hw.html",
            "relUrl": "/unit-8/2d%20arrays/2022/12/09/cb8-hw.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 7 Homework",
            "content": "Homework: . Sort an ArrayList in descending order and swap the first and last elements | Find and display the hashCode of an Arraylist before and after being sorted | Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither | . ArrayList&lt;Integer&gt; n = new ArrayList&lt;Integer&gt;(); boolean a; boolean b; for (int i = 0; i &lt; 5; i++){ n.add(i); } for (int i = 5; i &gt; 0; i--){ n.add(i); } System.out.println(&quot;HashCode: &quot; + n.hashCode()); System.out.println(&quot;Original: &quot; + n); n.sort(Comparator.reverseOrder()); System.out.println(&quot;Sorted: &quot; + n); System.out.println(&quot;HashCode: &quot; + n.hashCode()); Collections.swap(n, 4, 0); System.out.println(&quot;Swapped first and last: &quot; + n); System.out.println(&quot;HashCode: &quot; + n.hashCode()); for (int i=0; i &lt; n.size() - 1; i++){ if (!(n.get(i) &lt;= n.get(i + 1))){ boolean a = false; } if (!(n.get(i) &gt;= n.get(i + 1))){ boolean b = false; } } if (a){ System.out.println(&quot;ascending&quot;); } if (b){ System.out.println(&quot;descending&quot;); } else{ System.out.println(&quot;neither&quot;); } . HashCode: -1631985086 Original: [0, 1, 2, 3, 4, 5, 4, 3, 2, 1] Sorted: [5, 4, 4, 3, 3, 2, 2, 1, 1, 0] HashCode: -287789284 Swapped first and last: [3, 4, 4, 3, 5, 2, 2, 1, 1, 0] HashCode: 162496028 neither .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-7/2d%20array%20lists/2022/12/09/cb7-hw.html",
            "relUrl": "/unit-7/2d%20array%20lists/2022/12/09/cb7-hw.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 1 Primitives",
            "content": "Why to use Java? (1.1) . Java is an important programming language that is widely used throughout the tech industry and contains many important programmming concepts such as object oriented programming. . Basic Java (1.1) . All code that runs must be in the main method (shown below) | To print something, use System.out.print(); and inside the parenthesis put text in quotes (String) To print with a new line, use System.out.println(); | . | To comment your code, use // for single line comments and /**/ for multiple lines (example will be shown below) It is important to describe how and why your code works, however dont describe obvious things | . | . public class Example { public static void main(String[] args) { System.out.print(&quot;Hello World&quot;); } } Example.main(null); . Hello World . List of Data Types (1.2) . Data types are different categories in which one can store various types of data. | The main Primitve data types are: Integer (int): used for whole numbers | Double (double): used for numbers with decimals | Boolean (boolean): used for true or false conditionals | . | For Primitive types, variables store actual data instead of reference | If the variable is declared final, it cannot be edited | A non Primitive type which is commonly used is String Stores text | . | . public class Example { public static void main(String[] args) { int Herbo = 10; double gasPrices = 7.99; final boolean Hot = true; System.out.println(Herbo); System.out.println(gasPrices); System.out.println(Hot); // Hot = false; cannot assign a value to final variable Hot } } Example.main(null); . 10 7.99 true . Operators (1.3) . In order to perform mathmatical calculations on integers and doubles, you can use operators | Main ones are +, -, *, / These are what you expect | When dividing integers, it always rounds down because output must be an integer | When dividing by 0, will get the ArithemticException Error | . | Modulus is %, used to get remainder when two numbers are divided | . public class Math { public static void main(String[] args) { int number = 2; int number2 = 5; double number3 = 2.0; double number4 = 5.0; System.out.println(number+number2); System.out.println(number3+number4); System.out.println(number-number2); System.out.println(number3-number4); System.out.println(number * number2); System.out.println(number3 * number4); System.out.println(number/number2); System.out.println(number3/number4); System.out.println(number4 % number3); System.out.println(number2 % number); } } Math.main(null); . 7 7.0 -3 -3.0 10 10.0 0 0.4 1.0 1 . Assignment operators (1.4) . += adds value of a variabe to another variable and assigns total value to first variable | -= subtracts value of a variabe to another variable and assigns total value to first variable | *= multiplies value of a variabe to another variable and assigns total value to first variable | /= multiplies value of a variabe to another variable and assigns total value to first variable | %= takes the remainder of a variable with a second variable and assigns remainder to first variable | ++ increments a variable by 1, to incrememt by more change second plus to number which you want to incrememnt by | -- subracts a variable by 1, to incrememt by more change second plus to number which you want to subtract by | . Casting and Ranges (1.5) . Doubles and Integers can be converted to each other using (int) or (double) When converting from doubles to integers, will round down | . | Integers are 4 bytes of data, can store between Integer.MAX_VALUE and Integer.MIN_VALUE | . public class Cast { public static void main(String[] args) { double num = 10.5; int num2 = 100; int numInt = (int)num; double num2Double = (double)num2; System.out.println(num); System.out.println(num2); System.out.println(numInt); System.out.println(num2Double); System.out.println(Integer.MAX_VALUE); System.out.println(Integer.MIN_VALUE); } } Cast.main(null); . 10.5 100 10 100.0 2147483647 -2147483648 . Code Example . public class Main { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;What is your name?&quot;); String name = sc.next(); //string System.out.println(name); System.out.println(&quot;How many pizzas do you want to buy?&quot;); int pizzas = sc.nextInt(); //integer System.out.println(pizzas); System.out.println(&quot;Do you have the discount (true/false)?&quot;); boolean hasDiscount = sc.nextBoolean(); //boolean System.out.println(hasDiscount); double price; //double, defaults to 0 if (hasDiscount) { price = 1.20; } else { price = 2.10; } char firstChar = name.charAt(0); //character double finalPrice = price * pizzas * 1.08; // adding taxes System.out.println(&quot;Hi &quot; + firstChar + &quot;! You have to pay &quot; + (finalPrice) + &quot; dollars.&quot;); } } Main.main(null); . What is your name? Kinish How many pizzas do you want to buy? 6 Do you have the discount (true/false)? true Hi K! You have to pay 7.776 dollars. .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-1/casting/main-method/tester-method/2022/12/01/unit-1-notes.html",
            "relUrl": "/unit-1/casting/main-method/tester-method/2022/12/01/unit-1-notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 5 - Writing Classes",
            "content": "5.1 Anatomy of a Class . Methods . Define what an object can do or the behavior of an object | Can access and use the object&#39;s instance variables ### Main Method | . public static void main​(String[] args){ } . String[] args: an array consisting of command-line arguments (Strings) | . // Basic Java Class public class Snack { // class name always starts with capital letter /* * Instance variables * Always declared right after class declaration * Declared with TYPE and NAME */ private String name; private int calories; // constructor public Snack(String n, int c){ name = n; calories = c; } // methods public String getName(){ // accessor return name; } public void setName(String n){ // mutator name = n; } // main method public static void main(String[] args) { Snack one = new Snack(&quot;Oreos&quot;, 100); System.out.println(one.getName()); } } Snack.main(null); . Oreos . Access Modifiers . Data Encapsulation . Data can be accessible or modifiable, BOTH, or NEITHER | . Read-Only . Instance variables are declared with the private keyword ==&gt; outside the class, the instance variables can only be accessed via public methods of the class | . public class Cow { // instance variables private String cowType; private String sound; private int numMilkings; // constructor public Cow (String cowType, String sound){ this.numMilkings = 0; this.cowType = cowType; this.sound = sound; } public String getSound(){ return sound; } } public class CowDriver{ public static void main(String[] args) { Cow myCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;); System.out.println(myCow.getSound()); // myCow.sound = &quot;bark!&quot;; } } CowDriver.main(null); . moo . public class Snack { private String name; private int calories; public Snack(String n, int c){ name = n; calories = c; } public String getName(){ // accessor return name; } } public class SnackDriver { public static void main(String[] args) { Snack one = new Snack(&quot;Oreos&quot;, 100); System.out.println(one.getName()); // only accessible with getter System.out.println(one.name); } } SnackDriver.main(null); . Write-Only . public class Snack { private String name; private int calories; public Snack(String n, int c){ name = n; calories = c; } public void setName(String n){ // accessor name = n; } } public class SnackDriver { public static void main(String[] args) { Snack one = new Snack(&quot;Oreos&quot;, 100); one.setName(&quot;Double Stuffed Oreos&quot;); // only accessible with setter one.name = &quot;Golden Oreos&quot;; } } SnackDriver.main(null); . 5.2 Constructors . Every instance of the Snack class has the attributes name and calories | . public class Snack { private String name; private int calories; /* * Constructors * Syntax: * Written after instance variables, before methods * Name must match name of the class * No return type */ // default constructor public Snack(){ name = null; calories = 0; } // constructor parameters (n and c) are local variables for the constructor only // you cannot use n and c anywhere else unless you specify them as parameters for another method public Snack(String n, int c){ name = n; calories = c; } public String getName(){ // accessor return name; } public static void main(String[] args) { Snack one = new Snack(); System.out.println(&quot;Using Default Constructor: &quot; + one.getName()); Snack two = new Snack(&quot;Oreos&quot;, 100); System.out.println(&quot;Using Two Constructor: &quot; + two.getName()); } } Snack.main(null); . Using Default Constructor: null Using Two Constructor: Oreos . 5.3 Comments . Ignored by compiler, not executed | Make code more readable for humans or prevent execution when testing | Are NOT required on AP Exam | . Types . Multi-line comments (/**/) | Single-line comments (//) | Javadoc comments Javadoc tool that comes with the Java JDK can pull out comments and create a web page with all your comments | . | . Other Vocab . Precondition: condition that must be true before execution of a code block Methods don&#39;t need to check preconditions | . | Postcondition: condition that is ALWAYS true after the execution of a code block Outcome | State of instance variables | . | . 5.4 Accessor Method (Getters) . Allows other objects outside of the class to obtain values of instance variables or static variables | Non-void method returns a single value Header includes return type (String, int, Long etc) | . | &quot;return by value&quot;: return expression at the end of a method will specify that value that will be returned (must correspond to the type) | Must be used when different classes need to access the instance variables | . // always public // must specify return type // getVariable (typical naming convention) // no parameters public String getVariable(){ } . toString() Method . Overridden method that provides description of a specific object (ie values of instance variables) | If System.out.print or System.out.println() is passed an object, that object&#39;s toString() method is called ==&gt; returned string is printed Java default toString() will return a hashcode, but you can manually write your own toString() method | . | . // method header always stays the same // always returns string // no parameters public String toString(){ } . Example . public class Snack { private String name; private int calories; public Snack(String n, int c){ name = n; calories = c; } // return values of instance variables public String toString(){ return &quot;Name: &quot; + name + &quot;; &quot; + &quot;Calories: &quot; + calories; } public static void main(String[] args) { Snack two = new Snack(&quot;Oreos&quot;, 100); System.out.println(two); } } Snack.main(null); . Name: Oreos; Calories: 100 . 5.5 Mutator Method (Modifier/Setter) . Typically a void method that changes value of instance variables or static variables void methods do not return values | . | Must be used when different classes need to modify instance variables | . // always public void // setVariable (naming convention) // parameter type must match type of instance variable being modified public void setVariable(String variable){ this.variable = variable; } . 5.6 Writing Methods . public class Song { /** Verse - prints out a verse of the song * @param number - a String like &quot;one&quot;, &quot;two&quot;, etc. * @param rhyme - a String like &quot;thumb&quot;, &quot;shoe&quot;, etc. */ public void verse(String number, String rhyme) { System.out.println(&quot;This old man, he played &quot; + number); System.out.println(&quot;He played knick knack on my &quot; + rhyme); } // The chorus method public void chorus() { System.out.println(&quot;With a knick knack paddy whack, give a dog a bone.&quot;); System.out.println(&quot;This old man came rolling home.&quot;); } public static void main(String args[]) { Song mySong = new Song(); mySong.verse(&quot;one&quot;, &quot;thumb&quot;); mySong.chorus(); mySong.verse(&quot;two&quot;, &quot;shoe&quot;); mySong.chorus(); } } Song.main(null); . This old man, he played one He played knick knack on my thumb With a knick knack paddy whack, give a dog a bone. This old man came rolling home. This old man, he played two He played knick knack on my shoe With a knick knack paddy whack, give a dog a bone. This old man came rolling home. .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-5/constructor/static/access-modifiers/public-private-protected/inheritance/mutator-method/2022/11/29/unit-5-notes.html",
            "relUrl": "/unit-5/constructor/static/access-modifiers/public-private-protected/inheritance/mutator-method/2022/11/29/unit-5-notes.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 1 Homework",
            "content": "Hack 1.1 . public class Printing { public static void main(String[] args){ System.out.println(&quot;Akhil Nandhakumar&quot;); System.out.println(&quot;CanCode&quot;); } } Printing.main(null); . Akhil Nandhakumar CanCode . Hack 1.2 . public class Biodata { public static void main(String[] args) { String name = &quot;Akhil Nandhakumar&quot;; int age = 18; boolean underclassman = false; double height = 5.7; System.out.println(name); System.out.println(age); System.out.println(underclassman); System.out.println(height); } } Biodata.main(null); . Akhil Nandhakumar 18 false 5.7 . Hack 1.3 . public class Num { public static void main(String[] args) { double num = ( ( ( 6 * 1234124 ) / 11345 ) - 890809 + 90800 ) % 980098; num = num / 100; System.out.println(num); } } Num.main(null); . -7993.57 . Hack 1.4 . public class GPACalculator { public static void main(String[] args) { Scanner input = new Scanner(System.in); String letterGrades = &quot;&quot;; double weight; double sum = 0.00; int num = 1; double classes = 0; System.out.print(&quot;Number of classes you are taking this trimester: n&quot;); classes = input.nextInt(); for (int i = 0; i &lt; classes; i++) { Scanner input2 = new Scanner(System.in); System.out.print(&quot;What is your Grade in Period &quot; + num + &quot;? &gt; &quot;); letterGrades = input2.nextLine(); System.out.print(letterGrades + &quot; n&quot;); if (letterGrades.equals(&quot;A&quot;)){ weight = 4.00; sum += weight; } else if (letterGrades.equals(&quot;B&quot;)){ weight = 3.00; sum += weight; } else if (letterGrades.equals(&quot;C&quot;)){ weight = 2.00; sum += weight; } else if (letterGrades.equals(&quot;D&quot;)){ weight = 1.00; sum += weight; } else if (letterGrades.equals(&quot;F&quot;)){ weight = 0.00; sum += weight; } num = num + 1; } double GPA = sum / classes; System.out.println(&quot;Your Un-weighted GPA is:&quot; + GPA); } } GPACalculator.main(null); . Hack 1.5 . public class CastActivity { public static void main(String[] args) { double doubleNum = 123456.123456; int doubleToInt = (int) doubleNum; System.out.println(&quot;double to int: &quot; + doubleToInt); // int largeNum = 678901234567890; // System.out.println(largeNum); // integer numebr too large error ^ } } CastActivity.main(null); . double to int: 123456 .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-1/2022/11/26/cb1-hw.html",
            "relUrl": "/unit-1/2022/11/26/cb1-hw.html",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "FRQ 1 - Control Structures",
            "content": "Implemented FRQ1 in Spring Project . Completed all methods | used Random generated valued for methods where code was un-implemented | Created API endpoints for each method | Link to Spring Project | . Complete/Enhance and Methods in APCalendar . public class APCalendar { public static boolean isLeapYear(int year) { if ( (year % 4 == 0) &amp;&amp; (year % 100 != 0)){ return true; } else if ( year % 400 == 0 ){ return true; } else { return false; } } public static int numberOfLeapYears(int year1, int year2) { int numOfLeapYears = 0; // initialize final count variable for(int i = year1; i &lt;= year2; i++){ // for loop that starts at the year1 number and goes until year 2 including it if(isLeapYear(i)){ // if the year is a leap year, add 1 to the count numOfLeapYears += 1; } } return numOfLeapYears; // return the count } public static int firstDayOfYear(int year) { return year = (int) Math.floor( Math.random() * 7 ); } public static int dayOfYear(int month, int day, int year) { return (int) (Math.random() * (366 - 1)) + 1; } public static int dayOfWeek(int month, int day, int year) { int startDay = firstDayOfYear(year); int selectedDay = dayOfYear(month, day, year); int returnDay = (startDay + selectedDay - 1) % 7; return returnDay; } /** Tester method */ public static void main(String[] args) { // Private access modifiers System.out.println(&quot; n n firstDayOfYear: &quot; + APCalendar.firstDayOfYear(2022)); System.out.println(&quot; n dayOfYear: &quot; + APCalendar.dayOfYear(1, 1, 2022)); // Public access modifiers System.out.println(&quot; n Testing isLeapYear:&quot;); System.out.println(&quot; n isLeapYear 2022: &quot; + APCalendar.isLeapYear(2022)); System.out.println(&quot; n isLeapYear 2000: &quot; + APCalendar.isLeapYear(2000)); System.out.println(&quot; n isLeapYear 3000: &quot; + APCalendar.isLeapYear(3000)); System.out.println(&quot; n numberOfLeapYears: &quot; + APCalendar.numberOfLeapYears(2000, 2022)); System.out.println(&quot; n dayOfWeek: &quot; + APCalendar.dayOfWeek(1, 1, 2022)); } } APCalendar.main(null); . firstDayOfYear: 6 dayOfYear: 317 Testing isLeapYear: isLeapYear 2022: false isLeapYear 2000: true isLeapYear 3000: false numberOfLeapYears: 6 dayOfWeek: 0 . Enhance APIs and @RESTController - Work With all POJOs and Methods in APCalendar . @RestController @RequestMapping(&quot;/api/calendar&quot;) public class CalendarApiController { /** GET isLeapYear endpoint * ObjectMapper throws exceptions on bad JSON * @throws JsonProcessingException * @throws JsonMappingException */ @GetMapping(&quot;/isLeapYear/{year}&quot;) public ResponseEntity&lt;JsonNode&gt; getIsLeapYear(@PathVariable int year) throws JsonMappingException, JsonProcessingException { // Backend Year Object Year year_obj = new Year(); year_obj.setYear(year); // evaluates Leap Year // Turn Year Object into JSON ObjectMapper mapper = new ObjectMapper(); JsonNode json = mapper.readTree(year_obj.isLeapYearToString()); // this requires exception handling return ResponseEntity.ok(json); // JSON response, see ExceptionHandlerAdvice for throws } @GetMapping(&quot;/firstDayOfYear/{year}&quot;) public ResponseEntity&lt;JsonNode&gt; getFirstDayOfYear(@PathVariable int year) throws JsonMappingException, JsonProcessingException { // Backend Year Object Year year_obj2 = new Year(); year_obj2.setFirstDayOfYear(year); // Turn Year Object into JSON ObjectMapper mapper = new ObjectMapper(); JsonNode json = mapper.readTree(year_obj2.firstDayOfYearToString()); // this requires exception handling return ResponseEntity.ok(json); // JSON response, see ExceptionHandlerAdvice for throws } @GetMapping(&quot;/numberOfLeapYears/{year1}/{year2}&quot;) public ResponseEntity&lt;JsonNode&gt; getNumberOfLeapYears(@PathVariable(&quot;year1&quot;) int year1, @PathVariable(&quot;year2&quot;) int year2) throws JsonMappingException, JsonProcessingException { // Backend Year Object Year year_obj3 = new Year(); year_obj3.setNumberOfLeapYears(year1, year2); // Turn Year Object into JSON ObjectMapper mapper = new ObjectMapper(); JsonNode json = mapper.readTree(year_obj3.numberOfLeapYearsToString()); // this requires exception handling return ResponseEntity.ok(json); // JSON response, see ExceptionHandlerAdvice for throws } @GetMapping(&quot;/dayOfYear/{month}/{day}/{year}&quot;) public ResponseEntity&lt;JsonNode&gt; getDayOfYear(@PathVariable(&quot;month&quot;) int month, @PathVariable(&quot;day&quot;) int day, @PathVariable(&quot;year&quot;) int year) throws JsonMappingException, JsonProcessingException { // Backend Year Object Year year_obj4 = new Year(); year_obj4.setDayOfYear(month, day, year); // Turn Year Object into JSON ObjectMapper mapper = new ObjectMapper(); JsonNode json = mapper.readTree(year_obj4.dayOfYearToString()); // this requires exception handling return ResponseEntity.ok(json); // JSON response, see ExceptionHandlerAdvice for throws } @GetMapping(&quot;/dayOfWeek/{month}/{day}/{year}&quot;) public ResponseEntity&lt;JsonNode&gt; getDayOfWeek(@PathVariable(&quot;month&quot;) int month, @PathVariable(&quot;day&quot;) int day, @PathVariable(&quot;year&quot;) int year) throws JsonMappingException, JsonProcessingException { // Backend Year Object Year year_obj5 = new Year(); year_obj5.setDayOfWeek(month, day, year); // Turn Year Object into JSON ObjectMapper mapper = new ObjectMapper(); JsonNode json = mapper.readTree(year_obj5.dayOfWeekToString()); // this requires exception handling return ResponseEntity.ok(json); // JSON response, see ExceptionHandlerAdvice for throws } } . Creating Getters/Setters/ToString for all Methods . /* firstDayOfYear getter/setters */ public int getFirstDayOfYear(int year) { return APCalendar.firstDayOfYear(year); } public void setFirstDayOfYear(int year) { // this is private to avoid tampering this.firstDayOfYear = APCalendar.firstDayOfYear(year); } public String firstDayOfYearToString(){ return ( &quot;{ &quot;firstDayOfYear &quot;: &quot; + this.firstDayOfYear + &quot; }&quot; ); } /* numberOfLeapYears getter/setters */ public int getNumberOfLeapYears(int year1, int year2) { return APCalendar.numberOfLeapYears(year1, year2); } public void setNumberOfLeapYears(int year1, int year2) { // this is private to avoid tampering this.numberOfLeapYears = APCalendar.numberOfLeapYears(year1, year2); } public String numberOfLeapYearsToString(){ return ( &quot;{ &quot;numberOfLeapYears &quot;: &quot; + this.numberOfLeapYears + &quot; }&quot; ); } /* dayOfYear getter/setters */ public int dayOfYear(int month, int day, int year) { return APCalendar.dayOfYear(month, day, year); } public void setDayOfYear(int month, int day, int year) { // this is private to avoid tampering this.dayOfYear = APCalendar.dayOfYear(month, day, year); } public String dayOfYearToString(){ return ( &quot;{ &quot;dayOfYear &quot;: &quot; + this.dayOfYear + &quot; }&quot; ); } /* dayOfWeek getter/setters */ public int dayOfWeek(int month, int day, int year) { return APCalendar.dayOfWeek(month, day, year); } public void setDayOfWeek(int month, int day, int year) { // this is private to avoid tampering this.dayOfWeek = APCalendar.dayOfWeek(month, day, year); } public String dayOfWeekToString(){ return ( &quot;{ &quot;dayOfWeek &quot;: &quot; + this.dayOfWeek + &quot; }&quot; ); } . Testing API Using Curl . . Testing API Using Browser . . Testing API Using Postman . . Using Debugger . Checking each iteration step to make sure numberOfLeapYears algorithm is correct | helped fix for loop count and syntax errors | . .",
            "url": "https://akhilnandhakumar.github.io/CSA/methods/control-structures/2022/11/17/FRQ-1.html",
            "relUrl": "/methods/control-structures/2022/11/17/FRQ-1.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Iteration Notes",
            "content": "4.1 While Loops (2.B, 3.C) . Repeats lines of code until a certain condition evaluates to false | . While loops consist of 2 portions: the boolean expression and the brackets which store the looping code inside. . while (condition) { ... } . The boolean expression is checked before the loop is started and every time the loop ends and is about to start anew. Usually, inside the loop something is done that slightly changes the conditions for the boolean expression until it reads false and ends. In the example below, the condition is x &gt; 0, meaning that x has to be changed for the loop to stop. Inside the loop, x is decremented by 1 every time, changing the conditions over and over again until it finally returns false and terminates the while loop. . int x = 5; // The boolean expression in this case is x &gt; 0 while (x &gt; 0) { System.out.println(x); x--; } . 5 4 3 2 1 . 4.2 For Loops . One of the most tested concepts in the APCSA exam | Skills 3.C, 4.C, and 5.C | . Three Parts of a For Loop . Initialization of a variable | Test condition | . for (initialize; test condition; change) { loop body } . Example . for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . 1 2 3 4 5 . 4.3 Loops and Strings . Strings can also be manipulated through the use of iteration. Strings can actually be thought of as an array of chars, so each char can also be manipulated as well! . String name = &quot;CodeCodeCode&quot;; for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . Co de Co de Co de . 4.4 Nested Iteration . Nested iteration is where there is a loop within a loop. It&#39;s kind of similar to the nested conditional that we learned yesterday in syntax. . A typical usage of nested looping is for two dimensions, like getting the pixel value of each pixel in an image across the columns and rows of pixels. Or, it can be used to print across these rows and columns to display some text . A very common nested iteration is the use of nested for loops, as they are concise enough to be used within each other without getting confused. Here is an example of code that uses nested for loops: . for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . **** **** **** **** **** . As seen, the code above has an output of 20 stars, with 5 rows and 4 columns. The amount of times the nested iterations loop in total will be the amount the outer one iterates multiplied by the inner one. The inner loop must finish all of its iterations before the outer loop can continue. . Question: . What happens if you swap the inner with the outer loop? What change will the output make? | . There can also be nested while loops, although they are not as practical, having to write out those variables outside of the condition. . For Each Loops . What is a for each loop? . As the name suggests, for-each loops are similar to for loops. In Java, the for-each loop is used to iterate through elements of arrays and collections (like ArrayList). It is also known as the enhanced for loop. . Here is the syntax for a for-each loop: . for(dataType item : array) { ... } . includes: . array: an array or collection | item: each value in an array or collection | dataType: specify the type of data in the array (int) | . Example . public class ForEachLoops { public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } } } . Output: . 2 10 5 12 .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-4/while%20loop/for%20loop/enhanced%20for%20loop%20(for%20each)/nested%20loops/2022/11/09/unit4notes.html",
            "relUrl": "/unit-4/while%20loop/for%20loop/enhanced%20for%20loop%20(for%20each)/nested%20loops/2022/11/09/unit4notes.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Final Blog",
            "content": "Test Corrections . Question 4: . I answered 2.33333333 instead of 2, because I didn&#39;t check to see what type of variable the num was. Because the variable type was Int, the result would be truncated to 2, not a double. | . | Question 15 . I thought solution II worked, and it technically did, but I did not iterate the whole way through and assumed that the for loop had the correct length, but it throws and outOfBounds error because it iterates too many times. | . | Question 23 . My answer would have worked if the condition for the loop was k &gt; 1, not k &gt; 0. I need to just read more carefully so that when I would out the iteration steps, I get the correct outputs. | . | Question 36 . I missclicked, this question was really easy, I thought I chose the correct answer but I guess I didn&#39;t, | . | . Reflection . Overall, I did really well. a 36/40 on the MCQ section and a good performance on the FRQ section would be a 5 on the ap exam. The part I really need to work on is maybe slowing down a bit and making sure I read the code given more closely to avoid making silly mistakes. All of the mistakes I made were not conceptual which is good, but to get a perfect score I need ot pay more attention on the instruction on the questions. . Unit 1 Homework - Code Below . Unit 1 NotesLINK . Repo Link: LINK . import java.util.Scanner; public class GradeCalculator { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;Is final in a separate category: (true/false)&quot;); boolean check = input.nextBoolean(); if(check){ System.out.println(&quot;Current Grade:&quot;); double currentGrade = input.nextDouble(); System.out.println(&quot;Desired Grade:&quot;); double desiredGrade = input.nextDouble(); System.out.println(&quot;How much percent of your grade is the final:&quot;); double finalPercent = input.nextDouble(); double finalGrade = ((desiredGrade-((1-finalPercent/100)*currentGrade))/(finalPercent/100)); System.out.println(&quot;You need: &quot; + finalGrade + &quot;%&quot;); input.close(); } else{ System.out.print(&quot;Current grade? &quot;); double currentGrade = input.nextDouble(); System.out.println(currentGrade); System.out.print(&quot;Test category weight: &quot;); int testCat = input.nextInt(); System.out.println(testCat); System.out.print(&quot;total points in test category: &quot;); int testCatPoints = input.nextInt(); System.out.println(testCatPoints); System.out.print(&quot;final points: &quot;); int finalPoints = input.nextInt(); System.out.println(finalPoints); System.out.print(&quot;your grade in test category: &quot;); double testCatGrade = input.nextDouble(); System.out.println(testCatGrade); System.out.print(&quot;desired grade: &quot;); double desiredGrade = input.nextDouble(); System.out.println(desiredGrade); double finalScore = ((0.01*testCatGrade*finalPoints*testCat)-(finalPoints*currentGrade)+(finalPoints*desiredGrade)-(currentGrade*testCatPoints)+(testCatPoints*desiredGrade))/testCat; System.out.print(&quot;You need to get at least a &quot; + String.format(&quot;%.2f&quot;, (finalScore/finalPoints)*100) + &quot;% on you final to get a &quot; + desiredGrade); } } } GradeCalculator.main(null); . Is final in a separate category: (true/false) Current grade? 91.23 Test category weight: 80 total points in test category: 650 final points: 150 your grade in test category: 89.6 desired grade: 90.0 You need to get at least a 81.40% on you final to get a 90.0 . Unit 2 Homework - LINK . Unit 2 Notes LINK | . Unit 3 Homework - LINK . Unit 3 Notes LINK | . Unit 4 Homework - LINK . Unit 4 Notes LINK | . Unit 5 Homework - LINK .",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/11/08/final-blog.html",
            "relUrl": "/2022/11/08/final-blog.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 5 Homework",
            "content": "2019 FRQ 2 Answer . public class StepTracker { private int totalSteps; private int minimumSteps; private int days; private int activeDays; public StepTracker(int min){ minimumSteps = min; totalSteps = 0; days = 0; activeDays = 0; } public void addDailySteps(int steps){ totalSteps += steps; days++; if (steps &gt;= minSteps){ activeDays++; } } public double averageSteps(){ if (days == 0){ return 0.0; } else{ return (double) totalSteps / days; } } public int getActiveDays(){ return days; } } .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-5/2022/10/22/cb5-hw.html",
            "relUrl": "/unit-5/2022/10/22/cb5-hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 4 Homework",
            "content": "Caeser Cipher Hack . public class CaesarCipher { public static String cipher(String message, String[] letters, int n) { String newMessage = &quot;&quot;; for (int i=0; i&lt;message.length(); i++) { int index = 0; for (int j=0; j&lt;letters.length; j++) { if (message.substring(i, i+1).equals(letters[j])) { index = j; } } index += n; if (index &gt; 25) { index -= 26; } newMessage += letters[index]; } return newMessage; } public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(cipher(message1, letters, 3)); System.out.println(cipher(message2, letters, 3)); System.out.println(cipher(message3, letters, 3)); } } CaesarCipher.main(null); . dicedjobd codedcodedcode supercalifragilisticexpialidocious .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-4/2022/10/22/cb4-hw.html",
            "relUrl": "/unit-4/2022/10/22/cb4-hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 3 Homework",
            "content": "FRQ 1 - 2019 Exam . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. #### (A) | Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. | isLeapYear(year) returns true if year is a leap year and false otherwise. | Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. | . public static int numberOfLeapYears(int year1, int year2){ int numOfLeapYears = 0; // initialize final count variable for(int i = year1; i &lt;= year2; i++){ // for loop that starts at the year1 number and goes until year 2 including it if(isLeapYear(i)){ // if the year is a leap year, add 1 to the count numOfLeapYears += 1; } } return numOfLeapYears; // return the count } . Scoring (5/5) . Initialize numeric variable (count) 1/1 | Loop through each necessary year in range (for loop, with condition in code block) 1/1 | Calls isLeapYear on valid year in range 1/1 | Update count based on result of isLeapYear 1/1 | Return count of leap years 1/1 | . (B) . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. | For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. | . public static int dayOfWeek(int month, int day, int year){ int date = dayOfYear(month, day, year); // gets current day number int first = firstDayofYear(year); // gets starting day of year int calculated = ((week + start)-1) % 7; // adds starting and current and subtracts one to account for the offset, and divides by 7. remainder determines the day of week return calculated; } . Scoring (4/4) . Call firstDayofYear 1/1 | Calls dayOfYear 1/1 | Calculate value representing day of week (-1, incorrect calculation) 1/1 | Return calculated value 1/1 | . Excercises 1-20 Even Only . Problem 2 . import java.util.Scanner; public class Prob2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;coeff a: &quot;); double a = input.nextDouble(); System.out.println(&quot;coeff b: &quot;); double b = input.nextDouble(); System.out.println(&quot;coeff c: &quot;); double c = input.nextDouble(); double root1 = (-b + (b * b - 4 * a * c)/(2*a)); double root2 = (-b - (b * b - 4 * a * c)/(2*a)); System.out.println(&quot;The roots are &quot; + root1 + &quot; and &quot; + root2); } } Prob2.main(null); . coeff a: coeff b: coeff c: The roots are -139.625 and 109.625 . Problem 4 . public class Prob4 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;num: &quot;); double number = input.nextDouble(); System.out.println(number); if (number &gt; 0) { System.out.println(&quot;pos&quot;); } else if (number == 0) { System.out.println(&quot;zero&quot;); } else { System.out.println(&quot;neg&quot;); } if (number &lt; 1) { System.out.println(&quot;neg&quot;); } else if (number &gt; 1000000) { System.out.println(&quot;too big &quot;); } } } Prob4.main(null); . num: 1356.0 pos . Problem 6 . public class Prob6 { static double truncate(double n, int decimalPlace) { n = n*Math.pow(10, decimalPlace); n = Math.floor(n); n = n/Math.pow(10, decimalPlace); return n; } public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;num 1: &quot;); double number1 = input.nextDouble(); double num1Trun = truncate(number1, 3); System.out.println(number1); System.out.print(&quot;num 2: &quot;); double number2 = input.nextDouble(); double num2Trun = truncate(number2, 3); System.out.println(number2); if (num1Trun == num2Trun) { System.out.println(&quot;true&quot;); } else { System.out.println(&quot;false&quot;); } } } Prob6.main(null); . num 1: 125.6667765 num 2: 125.6660940951 true . Problem 8 . public class Prob8 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;enter letter: &quot;); String letter = input.nextLine(); System.out.println(letter); String[] vowels = {&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot;A&quot;, &quot;E&quot;, &quot;I&quot;, &quot;O&quot;, &quot;U&quot;}; if(letter.length() &gt; 1) { System.out.println(&quot;not one letter&quot;); } else if (!letter.matches(&quot;[a-zA-Z]+&quot;)) { System.out.println(&quot;not a letter&quot;); } else if (vowels.contains(letter)) { System.out.println(&quot;vowel&quot;); } else { System.out.println(&quot;consonant&quot;); } input.close(); } } Prob8.main(null); . enter letter: e vowel . Problem 10 . public class Prob10 { public static void main(String[] args) { int[] n = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; for (int num : n) { System.out.println(num); } } } Prob10.main(null); . 1 2 3 4 5 6 7 8 9 10 . Problem 12 . public class Prob12 { public static void main(String[] args) { int sum = 0; double average; System.out.println(&quot;Input nums:&quot;); Scanner input = new Scanner(System.in); for (int i = 0; i &lt; 5; i++) { int num = input.nextInt(); System.out.println(num); sum += num; } average = sum/5; System.out.println(&quot;sum: &quot; + sum); System.out.println(&quot;avg: &quot; + average); } } Prob12.main(null); . Input nums: 9248357 934867 1342345 257 4 sum: 11525830 avg: 2305166.0 . Problem 14 . public class Prob14 { public static void main(String[] args) { System.out.println(&quot;num: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(&quot;terms: &quot;); int terms = input.nextInt(); for (int i = 0; i &lt;= terms; i++) { System.out.println(num + &quot; x &quot; + i + &quot; = &quot; + num*i); } } } Prob14.main(null); . num: terms: 4 x 0 = 0 4 x 1 = 4 4 x 2 = 8 4 x 3 = 12 4 x 4 = 16 4 x 5 = 20 4 x 6 = 24 4 x 7 = 28 . Problem 16 . public class Prob16 { public static void main(String[] args) { System.out.print(&quot;rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(j); } System.out.println(); } } } Prob16.main(null); . rows: 6 1 12 123 1234 12345 123456 . Prob 18 . public class Prob18 { public static void main(String[] args) { System.out.print(&quot;rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); int count = 1; for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(count + &quot; t&quot;); count++; } System.out.println(); } } } Prob18.main(null); . rows: 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . Problem 20 . public class Prob20 { public static void main(String[] args) { System.out.print(&quot;rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); int count = 1; for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(count + &quot; t&quot;); count++; } System.out.println(); } } } Prob20.main(null); . rows: 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-3/2022/10/22/cb3-hw.html",
            "relUrl": "/unit-3/2022/10/22/cb3-hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 2 Homework",
            "content": "FRQ 2021 1a . public int scoreGuess (String guess){ int count = 0; for (int i=0; i&lt;= secret.length()-guess.length(); i++){ if (secret.substring(i, i+guess.length()).equals(guess)){ count++; } } return count*guess.length()*guess.length() } . FRQ 2021 1b . public String findBetterGuess(String guess1, String guess2){ if (scoreGuess(guess1) &gt; scoreGuess(guess2)){ return guess1; } else if (scoreGuess(guess2) &gt; scoreGuess(guess1)){ return guess1p } if (guess1.compareTo(guess2) &gt; 0){ return guess1; } else{ return guess2; } } . Google Form Quiz . .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-2/2022/10/22/cb2-hw.html",
            "relUrl": "/unit-2/2022/10/22/cb2-hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Week 8 Requirements",
            "content": "Week 8 Ticket . Scored by Tristan: 2.7+ . code.org requirements met, organized CB learning and did a little bit extra for primitives with a grade calculator | . Unit 1 and 2 Blogs . Unit 1 LINK | Unit 2 LINK | . Link to CTE Planning . Link to CTE Planning | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/10/17/week-8.html",
            "relUrl": "/tickets/2022/10/17/week-8.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 2 Objects",
            "content": "Objects . Objects are instances of Classes, which are like a template of data (attributes) and functions (methods) | Objects are created and their contents, which are pulled from the class, is used in code | Examples below: | . Creating a class with a method . public class Tennis { // class creation public void printPlayers(){ // simple method System.out.println(&quot;Nadal&quot;); System.out.println(&quot;Federer&quot;); System.out.println(&quot;Djokovic&quot;); } public static void main(String[] args){ // main class that runs Tennis myObject = new Tennis(); // CREATING AN OBJECT FROM TENNIS CLASS myObject.printPlayers(); // Use dot notation to reference methods/attributes from the class that the object is initialized from } } Tennis.main(null); . Nadal Federer Djokovic . Inheritance . Extending another Class inherits all of the methods and attributes from that class. | Class being extended is called the super class | Class extending is called subclass | . public class TennisTwo extends Tennis{ // extending Tennis class public TennisTwo(){ // TennisTwo now has all of Tennis&#39;s methods super(); } public static void main(String[] args){ // main class that runs TennisTwo myObjectTwo = new TennisTwo(); // CREATING AN OBJECT FROM TENNISTWO CLASS myObjectTwo.printPlayers(); // Use dot notation to reference methods/attributes from the INHERITED class } } TennisTwo.main(null); . Nadal Federer Djokovic . HACK - Console Menu . Click Here to Go to Hack . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-2/2022/10/16/unit-2-blog.html",
            "relUrl": "/unit-2/2022/10/16/unit-2-blog.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Fetch of Backend API",
            "content": "Recipe Yummy Yucky .",
            "url": "https://akhilnandhakumar.github.io/CSA/api/frontend",
            "relUrl": "/api/frontend",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "ArrayLists and Lists",
            "content": "Demonstrating Usage of all Methods . import java.util.ArrayList; import java.util.Comparator; public class Main { public static void main(String[] args) { // Creating 2 arraylists ArrayList&lt;String&gt; notPro = new ArrayList&lt;String&gt;(); ArrayList&lt;String&gt; Pro = new ArrayList&lt;String&gt;(); // Adding without index notPro.add(&quot;Akhil&quot;); notPro.add(&quot;Nakul&quot;); System.out.println(&quot;List 1 add() without index:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // list 1 adding with index notPro.add(0, &quot;Nathan&quot;); notPro.add(2, &quot;Rebecca&quot;); System.out.println(&quot;List 1 add() harsha at index 0, and nakul at index 2:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // size() System.out.println(&quot;Size of list 1:&quot; + &quot; n&quot; + notPro.size() + &quot; n&quot;); // Adding list 2 to list 1 using addAll() Pro.add(&quot;Federer&quot;); Pro.add(&quot;Nadal&quot;); Pro.add(&quot;Alcaraz&quot;); notPro.addAll(Pro); System.out.println(&quot;addAll() adding without index:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // Adding list 2 to list 1 with index notPro.clear(); notPro.add(&quot;Akhil&quot;); notPro.add(&quot;Nakul&quot;); notPro.add(0, &quot;Nathan&quot;); notPro.add(2, &quot;Rebecca&quot;); notPro.addAll(2, Pro); System.out.println(&quot;addAll() adding at index 2:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // remove(int) index notPro.remove(6); System.out.println(&quot;remove() at index 6:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // remove(element) notPro.remove(&quot;Rebecca&quot;); System.out.println(&quot;remove() Rebecca:&quot; + &quot; n&quot; + notPro + &quot; n&quot;); // get(index) System.out.println(&quot;Get element at index 2:&quot; + &quot; n&quot; + notPro.get(2) + &quot; n&quot;); // set(index) System.out.print(&quot;Set element at index 2:&quot; + &quot; n&quot; + &quot;Before: &quot;); System.out.println(notPro); notPro.set(2, &quot;Djokovic&quot;); System.out.println(&quot;After: &quot; + notPro + &quot; n&quot;); // indexOf(element) System.out.println(&quot;indexOf Akhil:&quot; + &quot; n&quot; + notPro.indexOf(&quot;Akhil&quot;) + &quot; n&quot;); notPro.add(&quot;Akhil&quot;); //temp for next method // lastIndexOf(element) System.out.println(&quot;Last index of Akhil: &quot; + notPro.lastIndexOf(&quot;Akhil&quot;) + &quot; n&quot; + notPro + &quot; n&quot;); // equals(element) System.out.println(&quot; Equals Akhil: &quot; + notPro.equals(&quot;Akhil&quot;) + &quot; n&quot;); // hascode() System.out.println(&quot;Hash Code: &quot; + notPro.hashCode() + &quot; n&quot;); // isEmpty() System.out.println(&quot;Is the arraylist empty: &quot; + notPro.isEmpty() + &quot; n&quot;); // contains(element) System.out.println(&quot;Does arraylist contain &#39;Akhil&#39;: &quot; + notPro.contains(&quot;Akhil&quot;) + &quot; n&quot;); // containsAll(collection) System.out.println(&quot;Does arraylist contain Pro collection?: &quot; + &quot; n&quot; + &quot;Pro collection: &quot; + Pro ); System.out.println(notPro.containsAll(Pro) + &quot; n&quot;); notPro.add(&quot;Federer&quot;); // Adding missing element System.out.println(&quot;Does arraylist contain Pro collection?: &quot; + &quot; n&quot; + &quot;New Pro collection: &quot; + Pro ); System.out.println(notPro.containsAll(Pro) + &quot; n&quot;); // sort(comparator) System.out.println(&quot;Unsorted: &quot; + notPro); notPro.sort(Comparator.naturalOrder()); System.out.println(&quot;Sorted using natural alphabetical order comparator: &quot; + notPro + &quot; n&quot;); // clear() notPro.clear(); Pro.clear(); System.out.println(&quot;Cleared list1:&quot; + &quot; n&quot; + notPro); System.out.println(&quot;Cleared list2:&quot; + &quot; n&quot; + Pro); } } Main.main(null); . List 1 add() without index: [Akhil, Nakul] List 1 add() harsha at index 0, and nakul at index 2: [Nathan, Akhil, Rebecca, Nakul] Size of list 1: 4 addAll() adding without index: [Nathan, Akhil, Rebecca, Nakul, Federer, Nadal, Alcaraz] addAll() adding at index 2: [Nathan, Akhil, Federer, Nadal, Alcaraz, Rebecca, Nakul] remove() at index 6: [Nathan, Akhil, Federer, Nadal, Alcaraz, Rebecca] remove() Rebecca: [Nathan, Akhil, Federer, Nadal, Alcaraz] Get element at index 2: Federer Set element at index 2: Before: [Nathan, Akhil, Federer, Nadal, Alcaraz] After: [Nathan, Akhil, Djokovic, Nadal, Alcaraz] indexOf Akhil: 1 Last index of Akhil: 5 [Nathan, Akhil, Djokovic, Nadal, Alcaraz, Akhil] Equals Akhil: false Hash Code: -419671130 Is the arraylist empty: false Does arraylist contain &#39;Akhil&#39;: true Does arraylist contain Pro collection?: Pro collection: [Federer, Nadal, Alcaraz] false Does arraylist contain Pro collection?: New Pro collection: [Federer, Nadal, Alcaraz] true Unsorted: [Nathan, Akhil, Djokovic, Nadal, Alcaraz, Akhil, Federer] Sorted using natural alphabetical order comparator: [Akhil, Akhil, Alcaraz, Djokovic, Federer, Nadal, Nathan] Cleared list1: [] Cleared list2: [] . Trying 2D Arrays to hold Student Information . import java.util.ArrayList; import java.util.List; public class Java2DArrayList { public static void main(String[] args) { ArrayList&lt;List&gt; arraylist2D = new ArrayList&lt;List&gt;(); List student1=new ArrayList(); student1.add(&quot;Akhil&quot;); student1.add(&quot;Period 2&quot;); student1.add(&quot;Mortensen&quot;); List student2=new ArrayList(); student2.add(&quot;Re&#39;em&quot;); student2.add(&quot;Period 2&quot;); student2.add(&quot;Mortensen&quot;); List student3=new ArrayList(); student3.add(&quot;Saathvika&quot;); student3.add(&quot;Period 2&quot;); student3.add(&quot;Mortensen&quot;); List student4=new ArrayList(); student4.add(&quot;Tristan&quot;); student4.add(&quot;Period 2&quot;); student4.add(&quot;Mortensen&quot;); arraylist2D.add(student1); arraylist2D.add(student2); arraylist2D.add(student3); System.out.println(arraylist2D); } } Java2DArrayList.main(null); . [[Akhil, Period 2, Mortensen], [Re&#39;em, Period 2, Mortensen], [Saathvika, Period 2, Mortensen]] .",
            "url": "https://akhilnandhakumar.github.io/CSA/lists",
            "relUrl": "/lists",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Week 6 Hacks and Requirements | Design Approval",
            "content": "Images . Link | . API . Link | . Team Review . Team Ticket | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/10/04/week-6.html",
            "relUrl": "/tickets/2022/10/04/week-6.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Java RapidAPI",
            "content": "Java and RapidAPI use case . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . An HttpClient can be used to send requests and retrieve their responses | An HttpRequest sets up header and body to API provider | An HttpResponse is returned as a result of sending an HttpRequest | Typically a response body will be received, if all goes well | Next step, is to format the response body according to your data science needs | . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . Build your own Web Service . To build a Web Service in the backend allows you to control information and errors between your app and the user. A proper Web Service requires more code:RESTful interface, error handling, and in this case reducing the calls to the service according to update frequency.- There are benefits of building service in Java vs JavaScript: . - Firewall will not be blocked as backend server on AWS is outside the firewall - Selecting frontend service https://nighthawkcodingsociety.com that has been cleared through IT. - Many APIs have usage costs or usage limits, backend can serve while limiting direct API access. . Project link: https://github.com/nighthawkcoders/spring_portfolio/blob/master/src/main/java/com/nighthawk/spring_portfolio/mvc/covid/CovidApiController.java | . package com.nighthawk.spring_portfolio.mvc.covid; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . Hack - API Raw Output . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://ultimate-tennis1.p.rapidapi.com/live_leaderboard/50&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;af654d789amshce4b35d071f3bd2p1c0cc8jsn8db3aa6a8acc&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;ultimate-tennis1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . { &#34;Players&#34;: &#34;50&#34;, &#34;data&#34;: [ { &#34;Age&#34;: &#34;19&#34;, &#34;Championship Points&#34;: &#34;7,240&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;6,740&#34;, &#34;Name&#34;: &#34;Carlos Alcaraz&#34;, &#34;Next win points&#34;: &#34;6,785&#34;, &#34;Points&#34;: &#34;6,740&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 1, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;a0e2&#34; }, { &#34;Age&#34;: &#34;36&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;5,810&#34;, &#34;Name&#34;: &#34;Rafael Nadal&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;5,810&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 2, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;n409&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;6,100&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;5,645&#34;, &#34;Name&#34;: &#34;Casper Ruud&#34;, &#34;Next win points&#34;: &#34;5,645&#34;, &#34;Points&#34;: &#34;5,645&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 3, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;rh16&#34; }, { &#34;Age&#34;: &#34;26&#34;, &#34;Championship Points&#34;: &#34;5,565&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;5,065&#34;, &#34;Name&#34;: &#34;Daniil Medvedev&#34;, &#34;Next win points&#34;: &#34;5,110&#34;, &#34;Points&#34;: &#34;5,065&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 4, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;mm58&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;5,040&#34;, &#34;Name&#34;: &#34;Alexander Zverev&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;5,040&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 5, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;z355&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;5,265&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;4,810&#34;, &#34;Name&#34;: &#34;Stefanos Tsitsipas&#34;, &#34;Next win points&#34;: &#34;4,810&#34;, &#34;Points&#34;: &#34;4,810&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 6, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;te51&#34; }, { &#34;Age&#34;: &#34;35&#34;, &#34;Championship Points&#34;: &#34;4,320&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;3,820&#34;, &#34;Name&#34;: &#34;Novak Djokovic&#34;, &#34;Next win points&#34;: &#34;3,865&#34;, &#34;Points&#34;: &#34;3,820&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 7, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;d643&#34; }, { &#34;Age&#34;: &#34;27&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;3,445&#34;, &#34;Name&#34;: &#34;Cameron Norrie&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;3,445&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 8, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;n771&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;3,800&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;3,345&#34;, &#34;Name&#34;: &#34;Andrey Rublev&#34;, &#34;Next win points&#34;: &#34;3,345&#34;, &#34;Points&#34;: &#34;3,345&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 9, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;re44&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;3,675&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;3,175&#34;, &#34;Name&#34;: &#34;Hubert Hurkacz&#34;, &#34;Next win points&#34;: &#34;3,220&#34;, &#34;Points&#34;: &#34;3,175&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 10, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;hb71&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;3,510&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;3,055&#34;, &#34;Name&#34;: &#34;Taylor Fritz&#34;, &#34;Next win points&#34;: &#34;3,055&#34;, &#34;Points&#34;: &#34;3,055&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 11, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;fb98&#34; }, { &#34;Age&#34;: &#34;21&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;3,040&#34;, &#34;Name&#34;: &#34;Jannik Sinner&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;3,040&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 12, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;s0ag&#34; }, { &#34;Age&#34;: &#34;22&#34;, &#34;Championship Points&#34;: &#34;3,405&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;2,950&#34;, &#34;Name&#34;: &#34;Felix Auger-Aliassime&#34;, &#34;Next win points&#34;: &#34;2,950&#34;, &#34;Points&#34;: &#34;2,950&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 13, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;ag37&#34; }, { &#34;Age&#34;: &#34;34&#34;, &#34;Championship Points&#34;: &#34;2,995&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;2,495&#34;, &#34;Name&#34;: &#34;Marin Cilic&#34;, &#34;Next win points&#34;: &#34;2,540&#34;, &#34;Points&#34;: &#34;2,495&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 14, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;c977&#34; }, { &#34;Age&#34;: &#34;31&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;2,360&#34;, &#34;Name&#34;: &#34;Pablo Carreno Busta&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;2,360&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 15, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;cd85&#34; }, { &#34;Age&#34;: &#34;26&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;2,360&#34;, &#34;Name&#34;: &#34;Matteo Berrettini&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;2,360&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 16, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;bk40&#34; }, { &#34;Age&#34;: &#34;30&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;2,110&#34;, &#34;Name&#34;: &#34;Diego Schwartzman&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;2,110&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 17, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;sm37&#34; }, { &#34;Age&#34;: &#34;26&#34;, &#34;Championship Points&#34;: &#34;2,445&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,990&#34;, &#34;Name&#34;: &#34;Karen Khachanov&#34;, &#34;Next win points&#34;: &#34;1,990&#34;, &#34;Points&#34;: &#34;1,990&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 18, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;ke29&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;2,440&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,940&#34;, &#34;Name&#34;: &#34;Frances Tiafoe&#34;, &#34;Next win points&#34;: &#34;1,985&#34;, &#34;Points&#34;: &#34;1,940&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 19, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;td51&#34; }, { &#34;Age&#34;: &#34;27&#34;, &#34;Championship Points&#34;: &#34;2,280&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,780&#34;, &#34;Name&#34;: &#34;Nick Kyrgios&#34;, &#34;Next win points&#34;: &#34;1,825&#34;, &#34;Points&#34;: &#34;1,780&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 20, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;ke17&#34; }, { &#34;Age&#34;: &#34;34&#34;, &#34;Championship Points&#34;: &#34;2,250&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,760&#34;, &#34;Name&#34;: &#34;Roberto Bautista Agut&#34;, &#34;Next win points&#34;: &#34;1,795&#34;, &#34;Points&#34;: &#34;1,760&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 21, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;bd06&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;2,245&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,745&#34;, &#34;Name&#34;: &#34;Denis Shapovalov&#34;, &#34;Next win points&#34;: &#34;1,790&#34;, &#34;Points&#34;: &#34;1,745&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 22, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;su55&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;2,200&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,745&#34;, &#34;Name&#34;: &#34;Alex de Minaur&#34;, &#34;Next win points&#34;: &#34;1,745&#34;, &#34;Points&#34;: &#34;1,745&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 23, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;dh58&#34; }, { &#34;Age&#34;: &#34;31&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,640&#34;, &#34;Name&#34;: &#34;Grigor Dimitrov&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,640&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 24, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;d875&#34; }, { &#34;Age&#34;: &#34;32&#34;, &#34;Championship Points&#34;: &#34;1,970&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,490&#34;, &#34;Name&#34;: &#34;Daniel Evans&#34;, &#34;Next win points&#34;: &#34;1,515&#34;, &#34;Points&#34;: &#34;1,490&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 25, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;e687&#34; }, { &#34;Age&#34;: &#34;19&#34;, &#34;Championship Points&#34;: &#34;1,953&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,461&#34;, &#34;Name&#34;: &#34;Holger Rune&#34;, &#34;Next win points&#34;: &#34;1,498&#34;, &#34;Points&#34;: &#34;1,461&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 26, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;r0dg&#34; }, { &#34;Age&#34;: &#34;20&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,437&#34;, &#34;Name&#34;: &#34;Lorenzo Musetti&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,437&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 27, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;m0ej&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;1,905&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,405&#34;, &#34;Name&#34;: &#34;Borna Coric&#34;, &#34;Next win points&#34;: &#34;1,450&#34;, &#34;Points&#34;: &#34;1,405&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 28, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;cg80&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;1,879&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,394&#34;, &#34;Name&#34;: &#34;Francisco Cerundolo&#34;, &#34;Next win points&#34;: &#34;1,424&#34;, &#34;Points&#34;: &#34;1,394&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 29, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;c0au&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;1,375&#34;, &#34;Name&#34;: &#34;Tommy Paul&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;1,375&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 30, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;pl56&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;1,860&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,370&#34;, &#34;Name&#34;: &#34;Alejandro Davidovich Fokina&#34;, &#34;Next win points&#34;: &#34;1,405&#34;, &#34;Points&#34;: &#34;1,370&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 31, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;dh50&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;1,728&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,269&#34;, &#34;Name&#34;: &#34;Maxime Cressy&#34;, &#34;Next win points&#34;: &#34;1,273&#34;, &#34;Points&#34;: &#34;1,269&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 32, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;c0bc&#34; }, { &#34;Age&#34;: &#34;23&#34;, &#34;Championship Points&#34;: &#34;1,750&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,256&#34;, &#34;Name&#34;: &#34;Miomir Kecmanovic&#34;, &#34;Next win points&#34;: &#34;1,295&#34;, &#34;Points&#34;: &#34;1,256&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 33, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;ki95&#34; }, { &#34;Age&#34;: &#34;26&#34;, &#34;Championship Points&#34;: &#34;1,707&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,233&#34;, &#34;Name&#34;: &#34;Botic van de Zandschulp&#34;, &#34;Next win points&#34;: &#34;1,252&#34;, &#34;Points&#34;: &#34;1,233&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 34, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;v812&#34; }, { &#34;Age&#34;: &#34;21&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,205&#34;, &#34;Name&#34;: &#34;Sebastian Baez&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,205&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 35, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;b0bi&#34; }, { &#34;Age&#34;: &#34;30&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;1,185&#34;, &#34;Name&#34;: &#34;Nikoloz Basilashvili&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;1,185&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 36, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;bg23&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,185&#34;, &#34;Name&#34;: &#34;Reilly Opelka&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,185&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 37, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;o522&#34; }, { &#34;Age&#34;: &#34;36&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,105&#34;, &#34;Name&#34;: &#34;Gael Monfils&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,105&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 38, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;mc65&#34; }, { &#34;Age&#34;: &#34;29&#34;, &#34;Championship Points&#34;: &#34;1,585&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,085&#34;, &#34;Name&#34;: &#34;Aslan Karatsev&#34;, &#34;Next win points&#34;: &#34;1,130&#34;, &#34;Points&#34;: &#34;1,085&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 39, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;kc56&#34; }, { &#34;Age&#34;: &#34;34&#34;, &#34;Championship Points&#34;: &#34;1,565&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,085&#34;, &#34;Name&#34;: &#34;Albert Ramos-Vinolas&#34;, &#34;Next win points&#34;: &#34;1,110&#34;, &#34;Points&#34;: &#34;1,085&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 40, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;r772&#34; }, { &#34;Age&#34;: &#34;27&#34;, &#34;Championship Points&#34;: &#34;1,569&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,077&#34;, &#34;Name&#34;: &#34;Yoshihito Nishioka&#34;, &#34;Next win points&#34;: &#34;1,114&#34;, &#34;Points&#34;: &#34;1,077&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 41, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;n732&#34; }, { &#34;Age&#34;: &#34;21&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;-&#34;, &#34;Live Points&#34;: &#34;1,072&#34;, &#34;Name&#34;: &#34;Jenson Brooksby&#34;, &#34;Next win points&#34;: &#34;_&#34;, &#34;Points&#34;: &#34;1,072&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 42, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;b0cd&#34; }, { &#34;Age&#34;: &#34;25&#34;, &#34;Championship Points&#34;: &#34;1,525&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;1,045&#34;, &#34;Name&#34;: &#34;Alexander Bublik&#34;, &#34;Next win points&#34;: &#34;1,070&#34;, &#34;Points&#34;: &#34;1,045&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 43, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;bk92&#34; }, { &#34;Age&#34;: &#34;37&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;1,005&#34;, &#34;Name&#34;: &#34;John Isner&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;1,005&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 44, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;i186&#34; }, { &#34;Age&#34;: &#34;22&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;985&#34;, &#34;Name&#34;: &#34;Sebastian Korda&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;985&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 45, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;k0ah&#34; }, { &#34;Age&#34;: &#34;35&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;975&#34;, &#34;Name&#34;: &#34;Andy Murray&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;975&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 46, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;mc10&#34; }, { &#34;Age&#34;: &#34;21&#34;, &#34;Championship Points&#34;: &#34;1,454&#34;, &#34;Last Match Comment&#34;: &#34;Will play next in the R32.&#34;, &#34;Live Points&#34;: &#34;974&#34;, &#34;Name&#34;: &#34;Brandon Nakashima&#34;, &#34;Next win points&#34;: &#34;999&#34;, &#34;Points&#34;: &#34;974&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 47, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;n0ae&#34; }, { &#34;Age&#34;: &#34;24&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;971&#34;, &#34;Name&#34;: &#34;Alex Molcan&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;971&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 48, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;mv14&#34; }, { &#34;Age&#34;: &#34;20&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;961&#34;, &#34;Name&#34;: &#34;Jack Draper&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;961&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 49, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;d0co&#34; }, { &#34;Age&#34;: &#34;27&#34;, &#34;Championship Points&#34;: &#34;-&#34;, &#34;Last Match Comment&#34;: &#34;&#34;, &#34;Live Points&#34;: &#34;960&#34;, &#34;Name&#34;: &#34;Lorenzo Sonego&#34;, &#34;Next win points&#34;: &#34;-&#34;, &#34;Points&#34;: &#34;960&#34;, &#34;Points Difference&#34;: &#34;-&#34;, &#34;Rank&#34;: 50, &#34;Rank Diff&#34;: &#34;-&#34;, &#34;id&#34;: &#34;su87&#34; } ] } .",
            "url": "https://akhilnandhakumar.github.io/CSA/api",
            "relUrl": "/api",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Arrays and Images",
            "content": "Saving PNG to GIF . Image IO read and Image IO write are focus of this code. A key portion of working with Images, or any file, is to know location of the input and output directories. . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . Image Scaling and ASCII Conversion . In this example we print out a row of text for each row in the image. However, it seems as if the image is too tall. To address this problem, try to output a single character per block of pixels. In particular, average the grayscale values in a rectangular block that’s twice as tall as it is wide, and print out a single character for this block. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/50.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics python = new Pics(&quot;pythonlogo&quot;, &quot;png&quot;); python.printStats(&quot;Original&quot;); python.resize(12); python.printStats(&quot;Scaled&quot;); python.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 111833 257x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 16772 199x87 images/tmp/pumpkin.png Original: 33539 1024x1024 images/pythonlogo.png Scaled: 5225 246x123 images/tmp/pythonlogo.png . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Hacks . Continue to work with Classes, Arrays, and 2D arrays. FYI, you may need to make a directory /tmp under notebook images. . Look at comments above and see if there is better conversions for ASCII to reduce elongation and distortion. | Try to convert images into Grey Scale, Red Scale, Blue Scale, and Green Scale. | Additional Image Code . Runtime using Thymeleaf . Better Scaling for ASCII . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Scaled Ascii&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Scaled Ascii&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Scaled Ascii: 499298 389x413 images/MonaLisa.png Scaled Ascii: 39392 302x265 images/pumpkin.png . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://akhilnandhakumar.github.io/CSA/arrayimages",
            "relUrl": "/arrayimages",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Week 5 Hacks and Requirements | Design Starter",
            "content": "Fibonacci Link . Link | . JS/HTML . Link | . Team Review . Team Ticket | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/26/week-5.html",
            "relUrl": "/tickets/2022/09/26/week-5.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "JavaScript Tutorial",
            "content": "JavaScript references . JavaScript is the most important language you need to learn as a frontend developer. It&#39;s a great first language for web developers to learn. . W3Schools - reference | feecodecamp.org - pbl . | javascript30.com - pbl . | . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each index in the Array. | Return part create the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . Reference . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . Timer . There are ways to setup a delay. . Reference . $$.async(); console.log(&quot;Hello, World!&quot;); var action = { $$: $$, console: console, }; setTimeout(function() { $$.clear(0); // clear output cell action.$$.sendResult(&quot;Goodbye!&quot;); }, 2000); // 2 second timer . &#39;Goodbye!&#39; . Hacks . Objective of JavaScript is to produce frontend code. Working in Jupyter Notebooks could help in the process of visualizing design with short and interactive feedback. However, my hope is that you move to Fastpages and play with Frontend code in that environment and do the REAL thing. Here is my suggestion. . Design at least one screen with data from a structure (like Person data above), that is used to dynamically create HTML. As an alternative to HTML text method above, look at Jokes post and usage createElement... . BACKEND JS . const resultContainer = document.getElementById(&quot;result&quot;); // function holds data for players function Player(name, nationality, rank) { this.name = name; this.nationality = nationality; this.rank = rank; } // json conversion function Player.prototype.toJSON = function() { const obj = {name:this.name, nationality: this.nationality, rank: this.rank}; const json = JSON.stringify(obj); return json; } // list of players var list = [ new Player( &quot;Spain&quot;, &quot;#1&quot;, &quot;Carlos Alcaraz Garfia&quot;), new Player( &quot;Russia&quot;, &quot;#4&quot;, &quot;Danil Medvedev&quot;), new Player( &quot;Norway&quot;, &quot;#2&quot;, &quot;Casper Ruud&quot;), new Player( &quot;Spain&quot;, &quot;#3&quot;, &quot;Rafael Nadal&quot;), new Player( &quot;USA&quot;, &quot;#2885893&quot;, &quot;Akhil Nandhakumar&quot;), new Player( &quot;USA&quot;, &quot;GOAT&quot;, &quot;Mr. Mort&quot;), new Player( &quot;Test&quot;, &quot;#10&quot;, &quot;Test&quot;) ]; function PlayerClass(players){ this.PlayerClass = players; this.json = []; this.PlayerClass.forEach(players =&gt; this.json.push(players.toJSON())); } // creates playerlist object playerlist = new PlayerClass(list); // javascript variables and methods to build html using previous data for (const row of playerlist.PlayerClass) { const tr = document.createElement(&quot;tr&quot;); const name = document.createElement(&quot;td&quot;); const id = document.createElement(&quot;td&quot;); const rank = document.createElement(&quot;td&quot;); name.innerHTML = row.name; id.innerHTML = row.nationality; rank.innerHTML = row.rank; tr.appendChild(rank); tr.appendChild(name); tr.appendChild(id); resultContainer.appendChild(tr); } . FRONTEND HTML . &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Nationality&lt;/th&gt; &lt;th&gt;Rank&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;/tbody&gt; &lt;/table&gt; .",
            "url": "https://akhilnandhakumar.github.io/CSA/js-html/",
            "relUrl": "/js-html/",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Fibonacci",
            "content": "Base Code . modified so that init is abstract, no code/runtime from init method | ABSTRACT, most basic form of the class, overwritten when extended | . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); // System.out.println(&quot;fibonacci List = &quot; + this.list); // System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } } . Extending: For Loop . public class FiboFor extends Fibo { public FiboFor() { super(); } public FiboFor(int nth) { super(nth); } protected void init() { super.name = &quot;For&quot;; long limit = this.size; // for loops are likely the most common iteration structure, all the looping facts are in one line for (long[] f = new long[]{0, 1}; limit-- &gt; 0; f = new long[]{f[1], f[0] + f[1]}) this.setData(f[0]); } static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For fibonacci Number 10 = 34 fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Extending: Recursive Loop . public class FiboRecursive extends Fibo{ public FiboRecursive() { super(5); } public FiboRecursive(int nth) { super(nth); } public void recursion(long limit, long[] f) { if (limit == 0) return; this.setData(f[0]); recursion(--limit, new long[]{f[1], f[0] + f[1]}); } protected void init() { super.name = &quot;Recursion&quot;; long limit = this.size; long[] f = new long[]{0, 1}; recursion(limit,f); } static public void main(String[] args) { FiboRecursive fib = new FiboRecursive(); fib.print(); } } FiboRecursive.main(null); . Init method = Recursion fibonacci Number 5 = 3 fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] . Extending: While Loop . public class FiboWhile extends Fibo { public FiboWhile() { super(20); } public FiboWhile(int nth) { super(nth); } protected void init() { super.name = &quot;While&quot;; long limit = this.size; long[] f = new long[]{0, 1}; while (limit-- &gt; 0) { this.setData(f[0]); f = new long[]{f[1], f[0] + f[1]}; } } static public void main(String[] args) { FiboWhile fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . College Board Skills . Skill 1.B:Determine code that would be used to complete code segments (ie For, While, Recursion): See table of contents for each code segment with different types of loops | . | Skill 4.C: Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) From the outputs, we can see that each code segment yields the same result. We can also make sure that the correct type of loop is running because of the print statements that show which function is being run, since each has a unique name associ | . | Skill 5.A: Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) . The recursion code segment iterates by running the function called &quot;recursion&quot;, which called the setdata method, and then re-runs itself by calling itself, and reducing limit by 1 each time, until limit = 0. | The while loop does the same as the recursive loop, but instead of calling itself over and over again, the loop is built into the &quot;while&quot; statement, which loops while (limit-- &gt; 0), which reduces limit each time by 1. | . | Noted: Did not need to use @override since the original init method from superclass did not have any code inside. Extending and modifying init worked without using @override . | .",
            "url": "https://akhilnandhakumar.github.io/CSA/inheritance/subclass/abstract%20class/super/2022/09/23/fibonacci.html",
            "relUrl": "/inheritance/subclass/abstract%20class/super/2022/09/23/fibonacci.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Week 4 Hacks and Requirements | 2D Arrays",
            "content": "2d Array Minilab . Link | . FRQ 1 - 2019 . Link | . Extra . Team Progress | implemented tristan’s solar system: LINK | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/20/week-4.html",
            "relUrl": "/tickets/2022/09/20/week-4.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "FRQ 1 - 2019 Exam",
            "content": "The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. #### (A) | Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. | isLeapYear(year) returns true if year is a leap year and false otherwise. | Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. | . public static int numberOfLeapYears(int year1, int year2){ int numOfLeapYears = 0; // initialize final count variable for(int i = year1; i &lt;= year2; i++){ // for loop that starts at the year1 number and goes until year 2 including it if(isLeapYear(i)){ // if the year is a leap year, add 1 to the count numOfLeapYears += 1; } } return numOfLeapYears; // return the count } . Scoring (5/5) . Initialize numeric variable (count) 1/1 | Loop through each necessary year in range (for loop, with condition in code block) 1/1 | Calls isLeapYear on valid year in range 1/1 | Update count based on result of isLeapYear 1/1 | Return count of leap years 1/1 | . (B) . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. | For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. | . public static int dayOfWeek(int month, int day, int year){ int date = dayOfYear(month, day, year); // gets current day number int first = firstDayofYear(year); // gets starting day of year int calculated = ((week + start)-1) % 7; // adds starting and current and subtracts one to account for the offset, and divides by 7. remainder determines the day of week return calculated; } . Scoring (4/4) . Call firstDayofYear 1/1 | Calls dayOfYear 1/1 | Calculate value representing day of week (-1, incorrect calculation) 1/1 | Return calculated value 1/1 | .",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/09/20/frq1.html",
            "relUrl": "/2022/09/20/frq1.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "2D Arrays and Iteration Lab",
            "content": "BASE CODE . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . HACK 2 &amp; 3 . Included rest of the poem, conditionals, and changing monkey properties | All COMMENTS REMOVED except for lines where code was changed | . class MonkeyLoop { String [][] monkeys; public MonkeyLoop() { monkeys = new String[][]{ //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot;--tristan--&quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++re&#39;em++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-akhil-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot;==not mort== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot;==harambe== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { for (int col = 0; col &lt; monkeys[col].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { System.out.print(monkeys[row][col]); System.out.print(&quot; t&quot;); } System.out.println(); } // Added the rest of the poem under the monkey print if (i &gt; 1){ System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); } else{ System.out.println(i + &quot; little monkey jumping on the bed...&quot;); } System.out.println(&quot;One fell down and bumped his head!&quot;); System.out.println(&quot;Mama called the doctor and the doctor said:&quot;); if (i == 1){ // if there is one monkey left, print the last line System.out.println(&quot;Put those monkeys right to bed!&quot;); } else{ System.out.println(&quot;No more monkey&#39;s jumping on the bed!&quot;); } System.out.println(); monkeyCount -= 1; } System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --tristan-- ++re&#39;em++ &lt;-akhil-&gt; ==not mort== ==harambe== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 5 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --tristan-- ++re&#39;em++ &lt;-akhil-&gt; ==not mort== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 4 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --tristan-- ++re&#39;em++ &lt;-akhil-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 3 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --tristan-- ++re&#39;em++ ⎛ ⎞ ⌋ ⌊ 2 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --tristan-- ⎛ ⎞ 1 little monkey jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: Put those monkeys right to bed! 0000000000000000000000000000000000 THE END . HACK 4 - Monkey Objects . All COMMENTS REMOVED except for lines where code was changed | . public class Monkey { String [][] monkey = new String[][]{ // 2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; _⎐_/ &quot;, &quot; &lt;-akhil-&gt; &quot;, &quot; 〈 〉 &quot; }, }; String firstLine; // gets each body part as a single string String secondLine; String thirdLine; String fourthLine; // method to distinguish body parts public Monkey() { firstLine = monkey[0][0]; secondLine = monkey[0][1]; thirdLine = monkey[0][2]; fourthLine = monkey[0][3]; } // outputting each body part public void getMonkey(){ System.out.println(this.firstLine); System.out.println(this.secondLine); System.out.println(this.thirdLine); System.out.println(this.fourthLine); } } public class MonkeyPrint { // main method to print monkey as an object public static void main(String[] args) { Monkey monkey = new Monkey(); // creates the monkey object from the monkey class monkey.getMonkey(); // runs getmonkey method to print the monkey } } MonkeyPrint.main(null); . ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-akhil-&gt; 〈 〉 .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-6/unit-4/2022/09/15/iteration-lab.html",
            "relUrl": "/unit-6/unit-4/2022/09/15/iteration-lab.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Solar System",
            "content": "",
            "url": "https://akhilnandhakumar.github.io/CSA/2022/09/14/solar-system.html",
            "relUrl": "/2022/09/14/solar-system.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Week 3 Hacks and Requirements | Backend Development",
            "content": "Deployment . Deployed Site: akhilcodingsociety.tk | . Lesson On Conditionals . Link: Lesson on Conditionals | . Focus/Habits/Productive Blogging . About Page and site about myself: LINK | Fastpages running locally: Localhost | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/11/week-3.html",
            "relUrl": "/tickets/2022/09/11/week-3.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Conditionals and Boolean Expressions",
            "content": "Conditionals and Booleans . Conditionals with regards to programming are pieces of code that tell the computer which path to take in running a program | If a certain condition is met, the computer will run a certain section of code | if the condition is not met, the computer will run a different section of code | A conditional statement is a boolean expression, the segment evaluates to either true of false | conditionals can be used within other conditional statements depending on the outcome of code | keeping these expressions simple makes code easy to understand | . If . an &quot;If&quot; statement is the simplest conditional. Usage below. | . public class If{ public static void main(String[] arg){ int num = 20; //create a variable if(num&gt;18){ // check if condition is true of false (Boolean) System.out.println(&quot;num is greater than 18&quot;); // print output if true } } } If.main(null); . num is greater than 18 . Else . an &quot;Else&quot; statement is a conditional that is evaluated if the previous &quot;if&quot; conditional evaluates to false. Usage below. | . public class IfandElse{ public static void main(String[] arg){ int num = 20; //create a variable if(num&gt;30){ // check if condition is true of false (Boolean) System.out.println(&quot;num is greater than 18&quot;); // print output if true } else{ System.out.println(&quot;num is not greater than 18&quot;); // print output when &quot;if&quot; evaluates to false } } } IfandElse.main(null); . num is not greater than 18 . ElseIf . an &quot;ElseIf&quot; conditional is used when more than 2 conditionals are required for a certain task. | And &quot;ElseIf&quot; will evaluate if the previous &quot;if&quot; of &quot;elseif&quot; statement evaluates to false. | can be used many many time in one segment usage below. | . public class ElseIf{ public static void main(String[] arg){ int num = 4; //create a variable if(num == 0){ // check if condition is true of false (Boolean) System.out.println(&quot;num is 00&quot;); // print output if true } else if(num==1){ System.out.println(&quot;num is 1&quot;); // print output when previous conditional evaluates to false } else if(num==2){ System.out.println(&quot;num is 2&quot;);// print output when previous conditional evaluates to false } else if(num==3){ System.out.println(&quot;num is 3&quot;); // print output when previous conditional evaluates to false } else if(num==4){ System.out.println(&quot;num is 4&quot;); // print output when previous conditional evaluates to false } else{ System.out.println(&quot;num is none of the above numbers&quot;); // print output when all previous conditionals are false } } } ElseIf.main(null); . num is 4 . Switch Case . If - Elseif - Else ladder conditionals shown above can be converted to a Case - Switch format usage shown below. | . public class SwitchCase{ public static void main(String[] arg){ int num = 4; //create a variable switch (num) { case 0: // if num is 0 System.out.println(&quot;num is 0&quot;); // print output if true break; case 1: // if num is 1 System.out.println(&quot;num is 1&quot;); // print output if true break; case 2: // if num is 2 System.out.println(&quot;num is 2&quot;); // print output if true break; case 3: // if num is 3 System.out.println(&quot;num is 3&quot;); // print output if true break; case 4: // if num is 0 System.out.println(&quot;num is 4&quot;); // print output if true break; default: System.out.println(&quot;num is none of the options above&quot;); // print output if true break; } } } SwitchCase.main(null); . num is 4 . De Morgan&#39;s Law . Complex conditional statements can be hard to evaluate when looking at &quot;!&quot; or &quot;not&quot; operators, and comparison operators, like &gt;, &lt;, &gt;=, &lt;=, ||, &amp;&amp;, and more | De morgan&#39;s law helps by explaining how operators change when a &quot;!&quot; negation is present | . Conversions: . &lt; becomes &gt;= | becomes &lt;= . | == becomes != | &lt;= becomes &gt; | = becomes &lt; . | != becomes == | . Usage Example Below: . public class DeMorgans{ public static void main(String[] arg){ int x = 2; int y = 3; // Confusing expression, difficult to look at and evaluate outcome if (!(x &gt; 3 &amp;&amp; y &lt; 2)){ System.out.println(&quot;1. Condition is met&quot;); } // converting comparison operators and removing ! using DeMorgan&#39;s Law if (x &lt;= 3 &amp;&amp; y &gt;= 2){ System.out.println(&quot;2. By removing &#39;!&#39; negation and converting using DemMorgans law, this will also be true.&quot;); } } } DeMorgans.main(null); . 1. Condition is met 2. By removing &#39;!&#39; negation and converting using DemMorgans law, this will also be true. . Simple Truth Table . helpful for determining outcomes when boolean values are changed | shows true and false outputs | example of simple &quot;or&quot; table below | . .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-3/compound%20boolean%20expression/de%20morgan's%20law/comparing%20numbers/truth%20table/2022/09/11/conditionals-lesson.html",
            "relUrl": "/unit-3/compound%20boolean%20expression/de%20morgan's%20law/comparing%20numbers/truth%20table/2022/09/11/conditionals-lesson.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://akhilnandhakumar.github.io/CSA/binary",
            "relUrl": "/binary",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Week 2 Hacks and Requirements | Using Objects",
            "content": "Code.org . Unit 1 Take-aways | . Java Using Objects and PBL design . Build a Console GUI focused on Java Math Class: LINK | Incorporated Binary Visualizer: LINK | Cloned Notes on Objects: LINK | . Extra! . Incorporating Feedback from Week 1: Using Tags Feature to Organize Page | Added Dark Mode | Local Hosting using Docker | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/05/week-2.html",
            "relUrl": "/tickets/2022/09/05/week-2.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Personal Console Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Hello World&quot;); System.out.println(&quot;2 - My GPA Calculator &quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private void calculator() { Scanner input = new Scanner(System.in); String letterGrades = &quot;&quot;; double weight; double sum = 0.00; int num = 1; double classes = 0; System.out.print(&quot;Number of classes you are taking this trimester: n&quot;); classes = input.nextInt(); for (int i = 0; i &lt; classes; i++) { Scanner input2 = new Scanner(System.in); System.out.print(&quot;What is your Grade in Period &quot; + num + &quot;? &gt; &quot;); letterGrades = input2.nextLine(); System.out.print(letterGrades + &quot; n&quot;); if (letterGrades.equals(&quot;A&quot;)){ weight = 4.00; sum += weight; } else if (letterGrades.equals(&quot;B&quot;)){ weight = 3.00; sum += weight; } else if (letterGrades.equals(&quot;C&quot;)){ weight = 2.00; sum += weight; } else if (letterGrades.equals(&quot;D&quot;)){ weight = 1.00; sum += weight; } else if (letterGrades.equals(&quot;F&quot;)){ weight = 0.00; sum += weight; } num = num + 1; } double GPA = sum / classes; System.out.println(&quot;Your Un-weighted GPA is:&quot; + GPA); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World! n&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World! n&quot;); case 2: calculator(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Hello World 2 - My GPA Calculator 0 - Quit - 2: Number of classes you are taking this trimester: What is your Grade in Period 1? &gt; A What is your Grade in Period 2? &gt; B What is your Grade in Period 3? &gt; B What is your Grade in Period 4? &gt; A What is your Grade in Period 5? &gt; C Your Un-weighted GPA is:3.2 0: Goodbye, World! .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-2/2022/08/31/my-menu-console.html",
            "relUrl": "/unit-2/2022/08/31/my-menu-console.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Week 1 Hacks and Requirements | Innovation - Primitives",
            "content": "Canvas Requirements . Scored by Tristan: 2.7+ . code.org requirements met, organized CB learning and did a little bit extra for primitives with a grade calculator | . Productive Blogging . Create a Jupyter Notebook(s) using IJava to capture key learning on Primitives: LINK | Create a Jupyter Notebook using Bash to show that you have all the key tools installed: LINK | Capture information that will grow to 10 college board units: LINK | . Code.org . . Extra! . Created a GPA Calculator for the Primitive Hacks, trying to meet college board and CTE Competencies | Link | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/08/28/week-1.html",
            "relUrl": "/tickets/2022/08/28/week-1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Installation Checks",
            "content": "Python Check . python --version python2 --version python3 --version . Python 2.7.18 Python 2.7.18 Python 3.9.7 . Jupyter and Jupyter Kernel Checks . jupyter kernelspec list . Available kernels: bash /Users/nakulnandhakumar/Library/Jupyter/kernels/bash javascript /Users/nakulnandhakumar/Library/Jupyter/kernels/javascript python2 /Library/Frameworks/Python.framework/Versions/2.7/share/jupyter/kernels/python2 java /usr/local/share/jupyter/kernels/java . Java Check . javac --version java --version . javac 17.0.4.1 java 17.0.4.1 2022-08-18 LTS Java(TM) SE Runtime Environment (build 17.0.4.1+1-LTS-2) Java HotSpot(TM) 64-Bit Server VM (build 17.0.4.1+1-LTS-2, mixed mode, sharing) . Homebrew Check . Anaconda installed through Brew . brew --version brew list . Homebrew 3.5.9 Homebrew/homebrew-core (git revision 8dc01dbd03a; last commit 2022-08-18) Homebrew/homebrew-cask (git revision 8703025552; last commit 2022-08-18) ==&gt; Formulae brotli git libuv pcre2 wget c-ares icu4c mpdecimal python@3.10 xz ca-certificates libidn2 node python@3.9 gdbm libnghttp2 openjdk readline gettext libunistring openssl@1.1 sqlite ==&gt; Casks anaconda .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/25/installation-checks.html",
            "relUrl": "/misc-notebooks/2022/08/25/installation-checks.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Week 0 Hacks and Requirements | Tools & Equipment",
            "content": "Tech Talk 1.0 Hacks . Fastpages . Python Notebook | Java Notebook | . . Insights . Fastpages Insights | Spring Project Insights | . Java Project . . Initial Code Commit | . test .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/08/19/week-0.html",
            "relUrl": "/tickets/2022/08/19/week-0.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello World&quot;) . Hello World .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/18/python-notebook.html",
            "relUrl": "/misc-notebooks/2022/08/18/python-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello world!&quot;); . Hello world! .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/18/java-notebook.html",
            "relUrl": "/misc-notebooks/2022/08/18/java-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Personal Blog",
          "content": "Contents . About | Interests and Achievements | . About Akhil Nandhakumar . . Me and my brother Nakul! | . I am a senior at Del Norte High School, and am taking AP CSA this year. My goals for this class is to fully understand Object Oriented Programing, and become proficient programming in Java. . . Working underneath an autonomous golf cart at a UCSD research internship! | . Outside of this class, my academic goals are to major in Aerospace Engineering and hopefully do computational mechanics for either the automotive industry or aviation. . . Late night tennis in Del Mar with my coach! | . I love playing tennis with my brother Nakul, practicing piano, singing, and learning fun things on my own in my free time, like how to backflip and juggling. I like being outdoors and spending time with my family, and am excited for my future in college and in a career. . Interests, Activities, and Achievements: . www.nandhakumar.net/akhil/ .",
          "url": "https://akhilnandhakumar.github.io/CSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Frontend Test",
          "content": "Name Nationality Rank . .",
          "url": "https://akhilnandhakumar.github.io/CSA/frontend/",
          "relUrl": "/frontend/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "CB Notes",
          "content": "This page will contain content to assist with my learning for College Board topics over the course of CSA this year. Notes on test prep, college board notes, and other resources for each unit will be here. . Table of Contents . Unit 1 | Unit 2 | Unit 3 | Unit 4 | Unit 5 | Unit 6 | Unit 7 | Unit 8 | Unit 9 | Unit 10 | . . Unit 1: Primitive Types . Learn the fundamentals of Java, a programming language, as well as other foundational concepts for coding. . PRIMITIVES LEARNINGS . Return to TOC | . Unit 2: Using Objects . Explore reference data as a way to represent real-world objects in a digital world and discover methods to perform more complex operations. . Return to TOC | . Unit 3: Boolean Expressions and if Statements . Delve into the building blocks of algorithms and focus on using conditional statements to solve problems and control results. . Return to TOC | . Unit 4: Iteration . Learn about iteration, another building block of algorithms that are for repetition. . Return to TOC | . Unit 5: Writing Classes . Explore how real-world interactions can be expressed digitally by organizing behaviors and attributes into classes, and you’ll examine the legal and ethical implications of computer programming. . Return to TOC | . Unit 6: Array . Learn techniques and standard algorithms to work with collections of related data, known as data structures. . Return to TOC | . Unit 7: ArrayList . Delve deeper into data sets, exploring ArrayList objects for larger amounts of data, as well as the privacy concerns related to personal data storage. . Return to TOC | . Unit 8: 2D Array . Branch out into 2D arrays and experiment with data sets represented in a table. . Return to TOC | . Unit 9: Inheritance . Learn how to manipulate programming without altering existing code by using subclasses to create a hierarchy. . Return to TOC | . Unit 10: Recursion . Work on solving larger problems by solving smaller, simpler versions of the same problem using recursive methods. . Return to TOC | .",
          "url": "https://akhilnandhakumar.github.io/CSA/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://akhilnandhakumar.github.io/CSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}