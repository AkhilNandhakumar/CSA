{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://akhilnandhakumar.github.io/CSA/jupyter/2022/09/10/test.html",
            "relUrl": "/jupyter/2022/09/10/test.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://akhilnandhakumar.github.io/CSA/binary",
            "relUrl": "/binary",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 2 Hacks and Requirements | Using Objects",
            "content": "Code.org . Unit 1 Take-aways | . Java Using Objects and PBL design . Build a Console GUI focused on Java Math Class: LINK | Incorporated Binary Visualizer: LINK | Cloned Notes on Objects: LINK | . Extra! . Incorporating Feedback from Week 1: Using Tags Feature to Organize Page | Added Dark Mode | Local Hosting using Docker | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/09/05/week-2.html",
            "relUrl": "/tickets/2022/09/05/week-2.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Code.Org Unit 1",
            "content": "// Creating a Class public class Painter . // Creating an Object called myPainter of Class Painter Painter myPainter = new Painter(); . // calling a method using dot notation myPainter.moveForward(); myPainter.turnRight(); myPainter.methodName(); . // Extends, known as inheritance public class PainterPlus extends Painter { public PainterPlus() { super(); } } . Extends / Inheritance . Extending another Class inherits all of the methods and attributes from that class. | Class being extended is called the super class | Class extending is called subclass | .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/09/05/codeorg-unit-1.html",
            "relUrl": "/misc-notebooks/2022/09/05/codeorg-unit-1.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Personal Console Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Hello World&quot;); System.out.println(&quot;2 - My GPA Calculator &quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private void calculator() { Scanner input = new Scanner(System.in); String letterGrades = &quot;&quot;; double weight; double sum = 0.00; int num = 1; double classes = 0; System.out.print(&quot;Number of classes you are taking this trimester: n&quot;); classes = input.nextInt(); for (int i = 0; i &lt; classes; i++) { Scanner input2 = new Scanner(System.in); System.out.print(&quot;What is your Grade in Period &quot; + num + &quot;? &gt; &quot;); letterGrades = input2.nextLine(); System.out.print(letterGrades + &quot; n&quot;); if (letterGrades.equals(&quot;A&quot;)){ weight = 4.00; sum += weight; } else if (letterGrades.equals(&quot;B&quot;)){ weight = 3.00; sum += weight; } else if (letterGrades.equals(&quot;C&quot;)){ weight = 2.00; sum += weight; } else if (letterGrades.equals(&quot;D&quot;)){ weight = 1.00; sum += weight; } else if (letterGrades.equals(&quot;F&quot;)){ weight = 0.00; sum += weight; } num = num + 1; } double GPA = sum / classes; System.out.println(&quot;Your Un-weighted GPA is:&quot; + GPA); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World! n&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World! n&quot;); case 2: calculator(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Hello World 2 - My GPA Calculator 0 - Quit - 2: Number of classes you are taking this trimester: What is your Grade in Period 1? &gt; A What is your Grade in Period 2? &gt; B What is your Grade in Period 3? &gt; B What is your Grade in Period 4? &gt; A What is your Grade in Period 5? &gt; C Your Un-weighted GPA is:3.2 0: Goodbye, World! .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-2/2022/08/31/my-menu-console.html",
            "relUrl": "/unit-2/2022/08/31/my-menu-console.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 1: Hello, World! 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...#################### 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-2/2022/08/30/java-objects.html",
            "relUrl": "/unit-2/2022/08/30/java-objects.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Week 1 Hacks and Requirements | Innovation - Primitives",
            "content": "Canvas Requirements . Scored by Tristan: 2.7+ . code.org requirements met, organized CB learning and did a little bit extra for primitives with a grade calculator | . Productive Blogging . Create a Jupyter Notebook(s) using IJava to capture key learning on Primitives: LINK | Create a Jupyter Notebook using Bash to show that you have all the key tools installed: LINK | Capture information that will grow to 10 college board units: LINK | . Code.org . . Extra! . Created a GPA Calculator for the Primitive Hacks, trying to meet college board and CTE Competencies | Link | .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/08/28/week-1.html",
            "relUrl": "/tickets/2022/08/28/week-1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Java - Primitives Learnings",
            "content": "Input and Output Testing . Testing Input and Output using Primitives (integers, doubles, booleans and Wrapper for strings) . // import Scanner (java input tool) import java.util.Scanner; public class InputTest { public static void main(String[] args) { Scanner input; // inputting integers input = new Scanner(System.in); //creates input object System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); // variable created called sampleInputInt given integer type System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } InputTest.main(null); . Enter an integer: 4 Enter a double: 4.3 Enter a boolean: true Enter a String: hi . Demonstrating Primitive Knowledge . Un-weighted GPA calculator . public class GPACalculator { public static void main(String[] args) { Scanner input = new Scanner(System.in); String letterGrades = &quot;&quot;; double weight; double sum = 0.00; int num = 1; double classes = 0; System.out.print(&quot;Number of classes you are taking this trimester: n&quot;); classes = input.nextInt(); for (int i = 0; i &lt; classes; i++) { Scanner input2 = new Scanner(System.in); System.out.print(&quot;What is your Grade in Period &quot; + num + &quot;? &gt; &quot;); letterGrades = input2.nextLine(); System.out.print(letterGrades + &quot; n&quot;); if (letterGrades.equals(&quot;A&quot;)){ weight = 4.00; sum += weight; } else if (letterGrades.equals(&quot;B&quot;)){ weight = 3.00; sum += weight; } else if (letterGrades.equals(&quot;C&quot;)){ weight = 2.00; sum += weight; } else if (letterGrades.equals(&quot;D&quot;)){ weight = 1.00; sum += weight; } else if (letterGrades.equals(&quot;F&quot;)){ weight = 0.00; sum += weight; } num = num + 1; } double GPA = sum / classes; System.out.println(&quot;Your Un-weighted GPA is:&quot; + GPA); } } GPACalculator.main(null); . Number of classes you are taking this trimester: What is your Grade in Period 1? &gt; A What is your Grade in Period 2? &gt; B What is your Grade in Period 3? &gt; B What is your Grade in Period 4? &gt; A What is your Grade in Period 5? &gt; C Your Un-weighted GPA is:3.2 .",
            "url": "https://akhilnandhakumar.github.io/CSA/unit-1/2022/08/25/primitives.html",
            "relUrl": "/unit-1/2022/08/25/primitives.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Installation Checks",
            "content": "Python Check . python --version python2 --version python3 --version . Python 2.7.18 Python 2.7.18 Python 3.9.7 . Jupyter and Jupyter Kernel Checks . jupyter kernelspec list . Available kernels: bash /Users/nakulnandhakumar/Library/Jupyter/kernels/bash javascript /Users/nakulnandhakumar/Library/Jupyter/kernels/javascript python2 /Library/Frameworks/Python.framework/Versions/2.7/share/jupyter/kernels/python2 java /usr/local/share/jupyter/kernels/java . Java Check . javac --version java --version . javac 17.0.4.1 java 17.0.4.1 2022-08-18 LTS Java(TM) SE Runtime Environment (build 17.0.4.1+1-LTS-2) Java HotSpot(TM) 64-Bit Server VM (build 17.0.4.1+1-LTS-2, mixed mode, sharing) . Homebrew Check . Anaconda installed through Brew . brew --version brew list . Homebrew 3.5.9 Homebrew/homebrew-core (git revision 8dc01dbd03a; last commit 2022-08-18) Homebrew/homebrew-cask (git revision 8703025552; last commit 2022-08-18) ==&gt; Formulae brotli git libuv pcre2 wget c-ares icu4c mpdecimal python@3.10 xz ca-certificates libidn2 node python@3.9 gdbm libnghttp2 openjdk readline gettext libunistring openssl@1.1 sqlite ==&gt; Casks anaconda .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/25/installation-checks.html",
            "relUrl": "/misc-notebooks/2022/08/25/installation-checks.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Week 0 Hacks and Requirements | Tools & Equipment",
            "content": "Tech Talk 1.0 Hacks . Fastpages . Python Notebook | Java Notebook | . . Insights . Fastpages Insights | Spring Project Insights | . Java Project . . Initial Code Commit | . test .",
            "url": "https://akhilnandhakumar.github.io/CSA/tickets/2022/08/19/week-0.html",
            "relUrl": "/tickets/2022/08/19/week-0.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello World&quot;) . Hello World .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/18/python-notebook.html",
            "relUrl": "/misc-notebooks/2022/08/18/python-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello world!&quot;); . Hello world! .",
            "url": "https://akhilnandhakumar.github.io/CSA/misc-notebooks/2022/08/18/java-notebook.html",
            "relUrl": "/misc-notebooks/2022/08/18/java-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Personal Blog",
          "content": "Contents . About | Interests and Achievements | . About Akhil Nandhakumar . . Me and my brother Nakul! | . I am a senior at Del Norte High School, and am taking AP CSA this year. My goals for this class is to fully understand Object Oriented Programing, and become proficient programming in Java. . . Working underneath an autonomous golf cart at a UCSD research internship! | . Outside of this class, my academic goals are to major in Aerospace Engineering and hopefully do computational mechanics for either the automotive industry or aviation. . . Late night tennis in Del Mar with my coach! | . I love playing tennis with my brother Nakul, practicing piano, singing, and learning fun things on my own in my free time, like how to backflip and juggling. I like being outdoors and spending time with my family, and am excited for my future in college and in a career. . Interests, Activities, and Achievements .",
          "url": "https://akhilnandhakumar.github.io/CSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "CB Notes",
          "content": "This page will contain content to assist with my learning for College Board topics over the course of CSA this year. Notes on test prep, college board notes, and other resources for each unit will be here. . Table of Contents . Unit 1 | Unit 2 | Unit 3 | Unit 4 | Unit 5 | Unit 6 | Unit 7 | Unit 8 | Unit 9 | Unit 10 | . . Unit 1: Primitive Types . Learn the fundamentals of Java, a programming language, as well as other foundational concepts for coding. . PRIMITIVES LEARNINGS . Return to TOC | . Unit 2: Using Objects . Explore reference data as a way to represent real-world objects in a digital world and discover methods to perform more complex operations. . Return to TOC | . Unit 3: Boolean Expressions and if Statements . Delve into the building blocks of algorithms and focus on using conditional statements to solve problems and control results. . Return to TOC | . Unit 4: Iteration . Learn about iteration, another building block of algorithms that are for repetition. . Return to TOC | . Unit 5: Writing Classes . Explore how real-world interactions can be expressed digitally by organizing behaviors and attributes into classes, and you’ll examine the legal and ethical implications of computer programming. . Return to TOC | . Unit 6: Array . Learn techniques and standard algorithms to work with collections of related data, known as data structures. . Return to TOC | . Unit 7: ArrayList . Delve deeper into data sets, exploring ArrayList objects for larger amounts of data, as well as the privacy concerns related to personal data storage. . Return to TOC | . Unit 8: 2D Array . Branch out into 2D arrays and experiment with data sets represented in a table. . Return to TOC | . Unit 9: Inheritance . Learn how to manipulate programming without altering existing code by using subclasses to create a hierarchy. . Return to TOC | . Unit 10: Recursion . Work on solving larger problems by solving smaller, simpler versions of the same problem using recursive methods. . Return to TOC | .",
          "url": "https://akhilnandhakumar.github.io/CSA/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://akhilnandhakumar.github.io/CSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}